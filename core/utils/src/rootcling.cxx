// Authors: Axel Naumann, Philippe Canal, Danilo Piparo

/*************************************************************************
 * Copyright (C) 1995-2013, Rene Brun and Fons Rademakers.               *
 * All rights reserved.                                                  *
 *                                                                       *
 * For the licensing terms see $ROOTSYS/LICENSE.                         *
 * For the list of contributors see $ROOTSYS/README/CREDITS.             *
 *************************************************************************/

// Write the help as a big string to have only one version of the documentation
const char *rootClingHelp =
"                                                                            \n"
"This program generates the Cling dictionaries needed in order to            \n"
"get access to your classes via the interpreter.                             \n"
"In addition rootcling can generate the Streamer(),                          \n"
"TBuffer &operator>>() and ShowMembers() methods for ROOT classes,           \n"
"i.e. classes using the ClassDef and ClassImp macros.                        \n"
"                                                                            \n"
"Rootcling can be used like:                                                 \n"
"                                                                            \n"
" rootcling TAttAxis.h[{+,-}][!] ... [LinkDef.h] > AxisDict.cxx              \n"
"                                                                            \n"
"or                                                                          \n"
"                                                                            \n"
" rootcling [-v[0-4]][-f] dict.C [-s sharedLibrary] [-m pcm]                 \n"
"          file.h[{+,-}][!] ... [LinkDef.h]                                  \n"
"                                                                            \n"
"The difference between the two is that in the first case only the           \n"
"Streamer() and ShowMembers() methods are generated while in the             \n"
"latter case a complete compileable file is generated (including             \n"
"the include statements). The first method also allows the                   \n"
"output to be appended to an already existing file (using >>).               \n"
"The optional - behind the header file name tells rootcling to not           \n"
"generate the Streamer() method. A custom method must be provided            \n"
"by the user in that case. For the + and ! options see below.                \n"
"By default the output file will not be overwritten if it exists.            \n"
"Use the -f (force) option to overwite the output file. The output           \n"
"file must have one of the following extensions: .cxx, .C, .cpp,             \n"
".cc, .cp.                                                                   \n"
"The flag -s must be followed by the name of the library that will           \n"
"contain the object file corresponding to the dictionary produced by         \n"
"this invocation of rootcling.  The name will be used as the stem            \n"
"for the name of the precompiled module generated by this                    \n"
"invocation of rootcling.                                                    \n"
"The flag -m must be followed by the name (absolute path or relative         \n"
"to the current path) of a pcm file which will be loaded before any          \n"
"header files.                                                               \n"
"The pcm file (module) produced by this invocation of rootcling will         \n"
"not include any of the declarations already included in the pcm             \n"
"files loaded via -m.  There can be more than one -m.                        \n"
"The flag --lib-list-prefix=xxx can be used to produce a list of             \n"
"libraries needed by the header files being parsed. Rootcling will           \n"
"read the content of xxx.in for a list of rootmap files (see                 \n"
"rlibmap). Rootcling will read these files and use them to deduce a          \n"
"list of libraries that are needed to properly link and load this            \n"
"dictionary. This list of libraries is saved in the first line of the        \n"
"file xxx.out; the remaining lines contains the list of classes for          \n"
"which this run of rootcling produced a dictionary.                          \n"
"This feature is used by ACliC (the automatic library generator).            \n"
"The verbose flags have the following meaning:                               \n"
"     -v   Display all messages                                              \n"
"     -v0  Display no messages at all.                                       \n"
"     -v1  Display only error messages (default).                            \n"
"     -v2  Display error and warning messages.                               \n"
"     -v3  Display error, warning and note messages.                         \n"
"     -v4  Display all messages                                              \n"
"The option -p, -c, -l, -cint, -reflex and -gccxml are deprecated            \n"
"and currently ignored.                                                      \n"
"                                                                            \n"
"Before specifying the first header file one can also add include            \n"
"file directories to be searched and preprocessor defines, like:             \n"
"  -I$MYPROJECT/include -DDebug=1                                            \n"
"                                                                            \n"
"The (optional) file LinkDef.h looks like:                                   \n"
"                                                                            \n"
"#ifdef __CINT__                                                             \n"
"                                                                            \n"
"#pragma link off all globals;                                               \n"
"#pragma link off all classes;                                               \n"
"#pragma link off all functions;                                             \n"
"                                                                            \n"
"#pragma link C++ class TAxis;                                               \n"
"#pragma link C++ class TAttAxis-;                                           \n"
"#pragma link C++ class TArrayC-!;                                           \n"
"#pragma link C++ class AliEvent+;                                           \n"
"                                                                            \n"
"#pragma link C++ function StrDup;                                           \n"
"#pragma link C++ function operator+(const TString&,const TString&);         \n"
"                                                                            \n"
"#pragma link C++ global gROOT;                                              \n"
"#pragma link C++ global gEnv;                                               \n"
"                                                                            \n"
"#pragma link C++ enum EMessageTypes;                                        \n"
"                                                                            \n"
"#endif                                                                      \n"
"                                                                            \n"
"This file tells rootcling for which classes the method interface            \n"
"stubs should be generated. A trailing - in the class name tells             \n"
"rootcling to not generate the Streamer() method. This is necessary          \n"
"for those classes that need a customized Streamer() method.                 \n"
"A trailing ! in the class name tells rootcling to not generate the          \n"
"operator>>(TBuffer &b, MyClass *&obj) function. This is necessary to        \n"
"be able to write pointers to objects of classes not inheriting from         \n"
"TObject. See for an example the source of the TArrayF class.                \n"
"If the class contains a ClassDef macro, a trailing + in the class           \n"
"name tells rootcling to generate an automatic Streamer(), i.e. a            \n"
"streamer that let ROOT do automatic schema evolution. Otherwise, a          \n"
"trailing + in the class name tells rootcling to generate a ShowMember       \n"
"function and a Shadow Class. The + option is mutually exclusive with        \n"
"the - option. For new classes the + option is the                           \n"
"preferred option. For legacy reasons it is not yet the default.             \n"
"When the linkdef file is not specified a default version exporting          \n"
"the classes with the names equal to the include files minus the .h          \n"
"is generated.                                                               \n"
"                                                                            \n"
"*** IMPORTANT ***                                                           \n"
"1) LinkDef.h must be the last argument on the rootcling command line.       \n"
"2) Note that the LinkDef file name MUST contain the string:                 \n"
"   LinkDef.h, Linkdef.h or linkdef.h, i.e. NA49_LinkDef.h is fine           \n"
"   just like, linkdef1.h. Linkdef.h is case sensitive.                      \n"
"                                                                            \n"
"The default constructor used by the ROOT I/O can be customized by           \n"
"using the rootcling pragma:                                                 \n"
"   #pragma link C++ ioctortype UserClass;                                   \n"
"For example, with this pragma and a class named MyClass,                    \n"
"this method will called the first of the following 3                        \n"
"constructors which exists and is public:                                    \n"
"   MyClass(UserClass*);                                                     \n"
"   MyClass(TRootIOCtor*);                                                   \n"
"   MyClass(); // Or a constructor with all its arguments defaulted.         \n"
"                                                                            \n"
"When more than one pragma ioctortype is used, the first seen has            \n"
"priority.  For example with:                                                \n"
"   #pragma link C++ ioctortype UserClass1;                                  \n"
"   #pragma link C++ ioctortype UserClass2;                                  \n"
"We look in the following order:                                             \n"
"   MyClass(UserClass1*);                                                    \n"
"   MyClass(UserClass2*);                                                    \n"
"   MyClass(TRootIOCtor*);                                                   \n"
"   MyClass(); // Or a constructor with all its arguments defaulted.         \n"
"                                                                           \n";

#include "RConfigure.h"
#include "RConfig.h"
#include "Rtypes.h"
#include "TModuleGenerator.h"

#include <iostream>
#include <iomanip>
#include <memory>
#include <vector>
#include <algorithm>
#include <time.h>


#include "cling/Interpreter/Interpreter.h"
#include "cling/Interpreter/LookupHelper.h"
#include "cling/Interpreter/Value.h"
#include "clang/AST/CXXInheritance.h"
#include "clang/Basic/Diagnostic.h"
#include "clang/Frontend/CompilerInstance.h"
#include "clang/Frontend/FrontendActions.h"
#include "clang/Lex/HeaderSearch.h"
#include "clang/Lex/Preprocessor.h"
#include "clang/Lex/Pragma.h"
#include "clang/Sema/Sema.h"
#include "clang/Serialization/ASTWriter.h"
#include "cling/Utils/AST.h"

#include "llvm/Bitcode/BitstreamWriter.h"
#include "llvm/Support/PathV2.h"

#ifdef WIN32
const std::string gPathSeparator ("\\");
#else
const std::string gPathSeparator ("/");
#endif


// FIXME To ease the option parsing.
// Presently used for the genreflex mode and not for the rootcling mode for
// historical reasons.
#include "OptionParser.h"

#ifdef __APPLE__
#include <libgen.h> // Needed for basename
#include <mach-o/dyld.h>
#endif

#if defined(R__WIN32)
#include "cygpath.h"
#else
#include <unistd.h>
#endif

#ifdef ROOTBUILD
# define ROOTBUILDVAL true
#else
# define ROOTBUILDVAL false
#endif

#ifdef R__EXTERN_LLVMDIR
# define R__LLVMDIR R__EXTERN_LLVMDIR
#else
# define R__LLVMDIR "./interpreter/llvm/inst" // only works for rootbuild for now!
#endif

template <typename T> struct IsPointer { enum { kVal = 0 }; };

// not needed: there for historical reasons?
// template <typename T> struct R__IsPointer<T*> { enum { kVal = 1 }; };
// const char *ShortTypeName(const char *typeDesc);

#ifdef _WIN32
#ifdef system
#undef system
#endif
#include <windows.h>
#include <Tlhelp32.h> // for MAX_MODULE_NAME32
#include <process.h>
#endif

#include <errno.h>
#include <time.h>
#include <string>
#include <list>
#include <vector>
#include <sstream>
#include <map>
#include <fstream>
#include <sys/stat.h>

namespace std {}
using namespace std;
namespace genreflex {
  bool verbose = false;
  }

#include "TClassEdit.h"
using namespace TClassEdit;
#include "TMetaUtils.h"

#include "RClStl.h"
#include "XMLReader.h"
#include "LinkdefReader.h"
#include "SelectionRules.h"
#include "Scanner.h"

enum {
   TClassTable__kHasCustomStreamerMember = 0x10 // See TClassTable.h
};


cling::Interpreter *gInterp = 0;

//______________________________________________________________________________
static void GetCurrentDirectory(std::string &output)
{
   char fixedLength[1024];
   char *currWorkDir = fixedLength;
   size_t len = 1024;
   char *result = currWorkDir;

   do {
      if (result == 0) {
         len = 2*len;
         if (fixedLength != currWorkDir) {
            delete [] currWorkDir;
         }
         currWorkDir = new char[len];
      }
#ifdef WIN32
      result = ::_getcwd(currWorkDir, len);
#else
      result = getcwd(currWorkDir, len);
#endif
   } while ( result == 0 && errno == ERANGE );

   output = currWorkDir;
   output += '/';

   if (fixedLength != currWorkDir) {
      delete [] currWorkDir;
   }
}

//______________________________________________________________________________
static std::string GetRelocatableHeaderName(const char *header, const std::string &currentDirectory)
{
   // Convert to path relative to $PWD
   // If that's not what the caller wants, she should pass -I to rootcling and a
   // different relative path to the header files.

   std::string result( header );

   const char *currWorkDir = currentDirectory.c_str();
   size_t lenCurrWorkDir = strlen(currWorkDir);
   if (result.substr(0, lenCurrWorkDir) == currWorkDir) {
      // Convert to path relative to $PWD.
      // If that's not what the caller wants, she should pass -I to rootcling and a
      // different relative path to the header files.
      result.erase(0, lenCurrWorkDir);
   }
#ifdef ROOTBUILD
   // For ROOT, convert module directories like core/base/inc/ to include/
   int posInc = result.find("/inc/");
   if (posInc != -1) {
      result = /*std::string("include") +*/ result.substr(posInc + 5, -1);
   }
#endif
   return result;
}
using namespace ROOT;

std::ostream* dictSrcOut = &std::cout;
std::ostream* dictHdrOut = &std::cout;

bool gNeedCollectionProxy = false;

//______________________________________________________________________________
bool Namespace__HasMethod(const clang::NamespaceDecl *cl, const char* name) 
{
   std::string given_name(name);
   for (
        clang::DeclContext::decl_iterator M = cl->decls_begin(),
        MEnd = cl->decls_begin();
        M != MEnd;
        ++M
        ) {
      if (M->isFunctionOrFunctionTemplate()) {
         clang::NamedDecl *named = llvm::dyn_cast<clang::NamedDecl>(*M);
         if (named && named->getNameAsString() == given_name) {
            return true;
         }
      }
   }
   return false;
}

//______________________________________________________________________________
void AnnotateFieldDecl(clang::NamedDecl& decl,
                       const std::list<VariableSelectionRule>& fieldSelRules)
{

   // See if in the VariableSelectionRules there are attributes and names with
   // which we can annotate.
   // We may look for a smarter algorithm.

   // Nothing to do then ...
   if (fieldSelRules.size()==0) return;
   
   clang::ASTContext &C = decl.getASTContext();
   clang::SourceRange commentRange; // Empty: this is a fake comment
   
   const std::string declName (decl.getName());
   std::string varName;
   for(std::list<VariableSelectionRule>::const_iterator it = fieldSelRules.begin();
       it != fieldSelRules.end(); ++it){
      if ( ! it->GetAttributeValue("name",varName)) continue;
      if (declName == varName){ // we have the rule!
         // Let's extract the attributes
         BaseSelectionRule::AttributesMap_t attrMap( it->GetAttributes() );
         BaseSelectionRule::AttributesMap_t::iterator iter;
         std::string userDefinedProperty;
         for(iter = attrMap.begin();iter!=attrMap.end();iter++){
            const std::string& name = iter->first;
            if (name == "name") continue;
            const std::string& value = iter->second;
            if (name == "transient" && value == "true") // special case
               userDefinedProperty="//!";
            else
               userDefinedProperty=name+ROOT::TMetaUtils::PropertyNameValSeparator+value;
            std::cout << varName << " " << userDefinedProperty << std::endl;
            decl.addAttr(new (C) clang::AnnotateAttr(commentRange, C, userDefinedProperty));
         }
      }
   }
}

// In order to store the meaningful for the IO comments we have to transform
// the comment into annotation of the given decl.
// This works only with comments in the headers, so no selectionrules in an xml
// file.
void AnnotateDecl(clang::CXXRecordDecl &CXXRD,
                  SelectionRules& selectionRules)
{
   using namespace clang;
   SourceLocation commentSLoc;
   llvm::StringRef comment;

   ASTContext &C = CXXRD.getASTContext();
   Sema& S = gInterp->getCI()->getSema();

   SourceRange commentRange;

   std::string declName;
   const std::string thisClassName(CXXRD.getName());

   if (genreflex::verbose)
      std::cout << "Inspecting class declaration" << thisClassName << " for annotations\n";

   // Fetch the selection rule associated to this class
   clang::Decl* declBaseClassPtr = static_cast<clang::Decl*>(&CXXRD);
   const BaseSelectionRule* thisClassBaseSelectionRule (selectionRules.IsDeclSelected(declBaseClassPtr));
   BaseSelectionRule::AttributesMap_t attrMap;
   // If the rule is there
   if (thisClassBaseSelectionRule){
      // Fetch and loop over Class attributes
      // if the name of the attribute is not "name", add attr to the ast.
      attrMap = thisClassBaseSelectionRule->GetAttributes();
      BaseSelectionRule::AttributesMap_t::iterator iter;
      std::string userDefinedProperty;
      for(iter = attrMap.begin();iter!=attrMap.end();iter++){
         const std::string& name = iter->first;
         if (name == "name") continue;
         const std::string& value = iter->second;
         userDefinedProperty=name+ROOT::TMetaUtils::PropertyNameValSeparator+value;
         if (genreflex::verbose) std::cout << " * " << userDefinedProperty << std::endl;
         CXXRD.addAttr(new (C) AnnotateAttr(commentRange, C, userDefinedProperty));
      }
   }
   
   if (genreflex::verbose)
      std::cout << "Inspecting class declaration" << thisClassName << " for annotations\n";

   // See if the rule is a class selection rule (FIX dynamic_cast)  
   const ClassSelectionRule* thisClassSelectionRule = reinterpret_cast<const ClassSelectionRule*>(thisClassBaseSelectionRule);
   
   for(CXXRecordDecl::decl_iterator I = CXXRD.decls_begin(),
          E = CXXRD.decls_end(); I != E; ++I) {
      // CXXMethodDecl,FieldDecl and VarDecl inherit from NamedDecl
      // See: http://clang.llvm.org/doxygen/classclang_1_1DeclaratorDecl.html
      if (!(*I)->isImplicit()
          && (isa<CXXMethodDecl>(*I) || isa<FieldDecl>(*I) || isa<VarDecl>(*I))) {

         
         // For now we allow only a special macro (ClassDef) to have meaningful comments
         SourceLocation maybeMacroLoc = (*I)->getLocation();
         bool isClassDefMacro = maybeMacroLoc.isMacroID() && S.findMacroSpelling(maybeMacroLoc, "ClassDef");
         if (isClassDefMacro) {
            while (isa<NamedDecl>(*I) && cast<NamedDecl>(*I)->getName() != "DeclFileLine") {
               ++I;
            }
         }

         comment = ROOT::TMetaUtils::GetComment(**I, &commentSLoc);
         if (comment.size()) {
            // Keep info for the source range of the comment in case we want to issue
            // nice warnings, eg. empty comment and so on.
            commentRange = SourceRange(commentSLoc, commentSLoc.getLocWithOffset(comment.size()));
            // The ClassDef annotation is for the class itself
            if (isClassDefMacro){
               CXXRD.addAttr(new (C) AnnotateAttr(commentRange, C, comment.str()));
            }
            else if (!selectionRules.IsSelectionXMLFile()){
               // Here we check if we are in presence of a selction file so that
               // the comment does not ends up as a decoration in the AST,
               // Nevertheless, w/o PCMS this has no effect, since the headers
               // are parsed at runtime and the information in the AST dumped by
               // rootcling is not relevant.
               (*I)->addAttr(new (C) AnnotateAttr(commentRange, C, comment.str()));
            }
         }
         // Match decls with sel rules if we are in presence of a selection file
         // and the cast was successful
         if (selectionRules.IsSelectionXMLFile() && thisClassSelectionRule!=0){            
            const std::list<VariableSelectionRule>& fieldSelRules = thisClassSelectionRule->GetFieldSelectionRules();

            NamedDecl* namedDecl (cast<NamedDecl>(*I));
            AnnotateFieldDecl(*namedDecl,fieldSelRules);
         } // End presence of XML selection file
      }
   }
}

std::string gResourceDir;

//______________________________________________________________________________
size_t GetFullArrayLength(const clang::ConstantArrayType *arrayType)
{
   llvm::APInt len = arrayType->getSize();
   while(const clang::ConstantArrayType *subArrayType = llvm::dyn_cast<clang::ConstantArrayType>(arrayType->getArrayElementTypeNoTypeQual()) )
   {
      len *= subArrayType->getSize();
      arrayType = subArrayType;
   }
   return len.getLimitedValue();
}


class FDVisitor : public clang::RecursiveASTVisitor<FDVisitor> {
private:
   clang::FunctionDecl* fFD;
public:
   clang::FunctionDecl* getFD() const { return fFD; }
   bool VisitDeclRefExpr(clang::DeclRefExpr* DRE) {
      fFD = llvm::dyn_cast<clang::FunctionDecl>(DRE->getDecl());
      return true;
   }
   FDVisitor() : fFD(0) {}
};

//______________________________________________________________________________
bool InheritsFromTObject(const clang::RecordDecl *cl,
                         const cling::Interpreter &interp)
{
   static const clang::CXXRecordDecl *TObject_decl = ROOT::TMetaUtils::R__ScopeSearch("TObject", interp);

   const clang::CXXRecordDecl *clxx = llvm::dyn_cast<clang::CXXRecordDecl>(cl);
   return ROOT::TMetaUtils::R__IsBase(clxx, TObject_decl);
}

//______________________________________________________________________________
bool InheritsFromTSelector(const clang::RecordDecl *cl,
                           const cling::Interpreter &interp)
{
   static const clang::CXXRecordDecl *TObject_decl = ROOT::TMetaUtils::R__ScopeSearch("TSelector", interp);

   return ROOT::TMetaUtils::R__IsBase(llvm::dyn_cast<clang::CXXRecordDecl>(cl), TObject_decl);
}

// Not used, there for historical reasons?
//______________________________________________________________________________
// void R__GetName(std::string &qual_name, const clang::NamedDecl *cl)
// {
//    llvm::raw_string_ostream stream(qual_name);
//    cl->getNameForDiagnostic(stream,cl->getASTContext().getPrintingPolicy(),false); // qual_name = N->getQualifiedNameAsString();
// }

//______________________________________________________________________________
inline bool R__IsTemplate(const clang::Decl &cl)
{
   return (cl.getKind() == clang::Decl::ClassTemplatePartialSpecialization
           || cl.getKind() == clang::Decl::ClassTemplateSpecialization);
}

// Not used, there for historical reasons?
//______________________________________________________________________________
// inline bool R__IsTemplate(const clang::CXXRecordDecl *cl)
// {
//   return cl->getTemplateSpecializationKind() != clang::TSK_Undeclared;
// }

//______________________________________________________________________________
bool IsSelectionXml(const char *filename)
{
   size_t len = strlen(filename);
   size_t xmllen = 4; /* strlen(".xml"); */
   if (strlen(filename) >= xmllen ) {
      return (0 == strcasecmp( filename + (len - xmllen), ".xml"));
   } else {
      return false;
   }
}

//______________________________________________________________________________
bool IsLinkdefFile(const char *filename)
{
   if ((strstr(filename,"LinkDef") || strstr(filename,"Linkdef") ||
        strstr(filename,"linkdef")) && strstr(filename,".h")) {
      return true;
   }
   size_t len = strlen(filename);
   size_t linkdeflen = 9; /* strlen("linkdef.h") */
   if (len >= 9) {
      if (0 == strncasecmp( filename + (len - linkdeflen), "linkdef", linkdeflen-2)
          && 0 == strcmp(filename + (len - 2),".h")
          ) {
         return true;
      } else {
         return false;
      }
   } else {
      return false;
   }
}

//______________________________________________________________________________
bool IsSelectionFile(const char *filename)
{
   return IsLinkdefFile(filename) || IsSelectionXml(filename);
}

//______________________________________________________________________________
const char *GetExePath()
{
   // Returns the executable path name, used by SetRootSys().

   static std::string exepath;
   if (exepath == "") {
#ifdef __APPLE__
      exepath = _dyld_get_image_name(0);
#endif
#ifdef __linux
      char linkname[PATH_MAX];  // /proc/<pid>/exe
      char buf[PATH_MAX];     // exe path name
      pid_t pid;

      // get our pid and build the name of the link in /proc
      pid = getpid();
      snprintf(linkname,PATH_MAX, "/proc/%i/exe", pid);
      int ret = readlink(linkname, buf, 1024);
      if (ret > 0 && ret < 1024) {
         buf[ret] = 0;
         exepath = buf;
      }
#endif
#ifdef _WIN32
   char *buf = new char[MAX_MODULE_NAME32 + 1];
   ::GetModuleFileName(NULL, buf, MAX_MODULE_NAME32 + 1);
   char* p = buf;
   while ((p = strchr(p, '\\')))
      *(p++) = '/';
   exepath = buf;
   delete[] buf;
#endif
   }
   return exepath.c_str();
}

//______________________________________________________________________________
void SetRootSys()
{
   // Set the ROOTSYS env var based on the executable location.

   const char *exepath = GetExePath();
   if (exepath && *exepath) {
#if !defined(_WIN32)
      char *ep = new char[PATH_MAX];
      if (!realpath(exepath, ep)) {
         if (getenv("ROOTSYS")) {
            delete [] ep;
            return;
         } else {
            fprintf(stderr, "rootcling: error getting realpath of rootcling, please set ROOTSYS in the shell");
            strlcpy(ep, exepath,PATH_MAX);
         }
      }
#else
      int nche = strlen(exepath)+1;
      char *ep = new char[nche];
      strlcpy(ep, exepath,nche);
#endif
      char *s;
      if ((s = strrchr(ep, '/'))) {
         // $ROOTSYS/bin/rootcling
         int removesubdirs = 2;
         if (!strncmp(s, "rootcling_tmp", 12))
            // $ROOTSYS/core/utils/src/rootcling_tmp
            removesubdirs = 4;
         for (int i = 1; s && i < removesubdirs; ++i) {
            *s = 0;
            s = strrchr(ep, '/');
         }
         if (s) *s = 0;
      } else {
         // There was no slashes at all let now change ROOTSYS
         return;
      }
      int ncha = strlen(ep) + 10;
      char *env = new char[ncha];
      snprintf(env, ncha, "ROOTSYS=%s", ep);
      putenv(env);
      delete [] ep;
   }
}

//______________________________________________________________________________
bool ParsePragmaLine(const std::string& line,
                     const char* expectedTokens[],
                     size_t* end = 0) {
   // Check whether the #pragma line contains expectedTokens (0-terminated array).
   if (end) *end = 0;
   if (line[0] != '#') return false;
   size_t pos = 1;
   for (const char** iToken = expectedTokens; *iToken; ++iToken) {
      while (isspace(line[pos])) ++pos;
      size_t lenToken = strlen(*iToken);
      if (line.compare(pos, lenToken, *iToken)) {
         if (end) *end = pos;
         return false;
      }
      pos += lenToken;
   }
   if (end) *end = pos;
   return true;
}


typedef map<string,string> Recmap_t;
Recmap_t gAutoloads;
string gLiblistPrefix;
string gLibsNeeded;

//______________________________________________________________________________
void RecordDeclCallback(const char *c)
{
   string need( gAutoloads[c] );
   if (need.length() && gLibsNeeded.find(need)==string::npos) {
      gLibsNeeded += " " + need;
   }
}

//______________________________________________________________________________
void LoadLibraryMap()
{
   string filelistname = gLiblistPrefix + ".in";
   ifstream filelist(filelistname.c_str());

   string filename;
   static char *buffer = 0;
   static unsigned int sbuffer = 0;

   while ( filelist >> filename ) {
#ifdef WIN32
      struct _stati64 finfo;

      if (_stati64(filename.c_str(), &finfo) < 0 ||
          finfo.st_mode & S_IFDIR) {
         continue;
      }
#else
      struct stat finfo;
      if (stat(filename.c_str(), &finfo) < 0 ||
          S_ISDIR(finfo.st_mode)) {
         continue;
      }

#endif

      ifstream file(filename.c_str());

      string line;
      string classname;

      while ( file >> line ) {

         if (line.substr(0,8)=="Library.") {

            int pos = line.find(":",8);
            classname = line.substr(8,pos-8);

            pos = 0;
            while ( (pos=classname.find("@@",pos)) >= 0 ) {
               classname.replace(pos,2,"::");
            }
            pos = 0;
            while ( (pos=classname.find("-",pos)) >= 0 ) {
               classname.replace(pos,1," ");
            }

            getline(file,line,'\n');

            while( line[0]==' ' ) line.replace(0,1,"");

            if ( strchr(classname.c_str(),':')!=0 ) {
               // We have a namespace and we have to check it first

               int slen = classname.size();
               for(int k=0;k<slen;++k) {
                  if (classname[k]==':') {
                     if (k+1>=slen || classname[k+1]!=':') {
                        // we expected another ':'
                        break;
                     }
                     if (k) {
                        string base = classname.substr(0,k);
                        if (base=="std") {
                           // std is not declared but is also ignored by CINT!
                           break;
                        } else {
                           gAutoloads[base] = ""; // We never load namespaces on their own.
                        }
                        ++k;
                     }
                  } else if (classname[k] == '<') {
                     // We do not want to look at the namespace inside the template parameters!
                     break;
                  }
               }
            }

            if (strncmp("ROOT::TImpProxy",classname.c_str(),strlen("ROOT::TImpProxy"))==0) {
               // Do not register the ROOT::TImpProxy so that they can be instantiated.
               continue;
            }
            gAutoloads[classname] = line;
            if (sbuffer < classname.size()+20) {
               delete [] buffer;
               sbuffer = classname.size()+20;
               buffer = new char[sbuffer];
            }
            strlcpy(buffer,classname.c_str(),sbuffer);
         }
      }
      file.close();
   }
}

//______________________________________________________________________________
bool CheckInputOperator(const char *what,
                        const char *proto,
                        const string &fullname,
                        const clang::RecordDecl *cl,
                        cling::Interpreter &interp)
{
   // Check if the specificed operator (what) has been properly declared if the user has
   // resquested a custom version.


   const clang::FunctionDecl *method = ROOT::TMetaUtils::R__GetFuncWithProto(llvm::dyn_cast<clang::Decl>(cl->getDeclContext()), what, proto, interp);
   if (!method) {
      // This intended to find the global scope.
      clang::TranslationUnitDecl *TU =
         cl->getASTContext().getTranslationUnitDecl();
      method = ROOT::TMetaUtils::R__GetFuncWithProto(TU, what, proto, interp);
   }
   bool has_input_error = false;
   if (method != 0 && (method->getAccess() == clang::AS_public || method->getAccess() == clang::AS_none) ) {
      std::string filename = ROOT::TMetaUtils::GetFileName(method);
      if (strstr(filename.c_str(),"TBuffer.h")!=0 ||
          strstr(filename.c_str(),"Rtypes.h" )!=0) {

         has_input_error = true;
      }
   } else {
      has_input_error = true;
   }
   if (has_input_error) {
      // We don't want to generate duplicated error messages in several dictionaries (when generating temporaries)
      const char *maybeconst = "";
      const char *mayberef = "&";
      if (what[strlen(what)-1]=='<') {
         maybeconst = "const ";
         mayberef = "";
      }
      ROOT::TMetaUtils::Error(0,
            "in this version of ROOT, the option '!' used in a linkdef file\n"
            "       implies the actual existence of customized operators.\n"
            "       The following declaration is now required:\n"
            "   TBuffer &%s(TBuffer &,%s%s *%s);\n",what,maybeconst,fullname.c_str(),mayberef);
   }
   return has_input_error;

}

//______________________________________________________________________________
bool CheckInputOperator(const clang::RecordDecl *cl, cling::Interpreter &interp)
{
   // Check if the operator>> has been properly declared if the user has
   // resquested a custom version.

   string fullname;
   ROOT::TMetaUtils::R__GetQualifiedName(fullname,*cl);
   int ncha = fullname.length()+13;
   char *proto = new char[ncha];
   snprintf(proto,ncha,"TBuffer&,%s*&",fullname.c_str());

   ROOT::TMetaUtils::Info(0, "Class %s: Do not generate operator>>()\n",
        fullname.c_str());

   // We do want to call both CheckInputOperator all the times.
   bool has_input_error = CheckInputOperator("operator>>",proto,fullname,cl, interp);
   has_input_error = CheckInputOperator("operator<<",proto,fullname,cl,interp) || has_input_error;
   return has_input_error;
}

//______________________________________________________________________________
bool CheckClassDef(const clang::RecordDecl *cl, const cling::Interpreter &interp)
{
   // Return false if the class does not have ClassDef even-though it should.


   // Detect if the class has a ClassDef
   bool hasClassDef = ROOT::TMetaUtils::ClassInfo__HasMethod(cl,"Class_Version", interp);

   const clang::CXXRecordDecl* clxx = llvm::dyn_cast<clang::CXXRecordDecl>(cl);
   if (!clxx) {
      return false;
   }
   bool isAbstract = clxx->isAbstract();

   bool result = true;
   if (!isAbstract && InheritsFromTObject(clxx, interp) && !InheritsFromTSelector(clxx, interp) && !hasClassDef) {
      ROOT::TMetaUtils::Error(ROOT::TMetaUtils::R__GetQualifiedName(*cl).c_str(),"CLING: %s inherits from TObject but does not have its own ClassDef\n",ROOT::TMetaUtils::R__GetQualifiedName(*cl).c_str());
      // We do want to always output the message (hence the Error level)
      // but still want rootcling to succeed.
      result = true;
   }

   return result;
}

//______________________________________________________________________________
string GetNonConstMemberName(const clang::FieldDecl &m, const string &prefix = "")
{
   // Return the name of the data member so that it can be used
   // by non-const operation (so it includes a const_cast if necessary).

   if (m.getType().isConstQualified()) {
      string ret = "const_cast< ";
      string type_name;
      ROOT::TMetaUtils::R__GetQualifiedName(type_name, m.getType(), m);
      ret += type_name;
      ret += " &>( ";
      ret += prefix;
      ret += m.getName().str();
      ret += " )";
      return ret;
   } else {
      return prefix+m.getName().str();
   }
}

//______________________________________________________________________________
bool NeedExternalShowMember(const ROOT::TMetaUtils::AnnotatedRecordDecl &cl_input, const cling::Interpreter &interp)
{
   if (TMetaUtils::IsStdClass(*cl_input.GetRecordDecl())) {
      // getName() return the template name without argument!
      llvm::StringRef name = (*cl_input).getName();

      if (name == "pair") return true;
      if (name == "complex") return true;
      if (name == "auto_ptr") return true;
      if (STLKind(name.str().c_str())) return false;
      if (name == "string" || name == "basic_string") return false;
   }

   // This means templated classes hiding members won't have
   // a proper shadow class, and the user has no chance of
   // veto-ing a shadow, as we need it for ShowMembers :-/
   if (ROOT::TMetaUtils::ClassInfo__HasMethod(cl_input,"ShowMembers", interp))
      return R__IsTemplate(*cl_input);

   // no streamer, no shadow
   if (cl_input.RequestNoStreamer()) return false;

   return (cl_input.RequestStreamerInfo());
}

//______________________________________________________________________________
int STLContainerStreamer(const clang::FieldDecl &m,
                         int rwmode,
                         const cling::Interpreter &interp,
                         const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt)
{
   // Create Streamer code for an STL container. Returns 1 if data member
   // was an STL container and if Streamer code has been created, 0 otherwise.

   int stltype = abs(ROOT::TMetaUtils::IsSTLContainer(m));
   std::string mTypename;
   ROOT::TMetaUtils::R__GetQualifiedName(mTypename, m.getType(), m);

   const clang::CXXRecordDecl* clxx = llvm::dyn_cast_or_null<clang::CXXRecordDecl>(ROOT::TMetaUtils::R__GetUnderlyingRecordDecl(m.getType()));

   if (stltype!=0) {
      //        fprintf(stderr,"Add %s (%d) which is also %s\n",
      //                m.Type()->Name(), stltype, m.Type()->TrueName() );
      clang::QualType utype(ROOT::TMetaUtils::GetUnderlyingType(m.getType()),0);
      RStl::Instance().GenerateTClassFor(utype,interp,normCtxt);
   }
   if (stltype<=0) return 0;
   if (clxx->getTemplateSpecializationKind() == clang::TSK_Undeclared) return 0;

   const clang::ClassTemplateSpecializationDecl *tmplt_specialization = llvm::dyn_cast<clang::ClassTemplateSpecializationDecl> (clxx);
   if (!tmplt_specialization) return 0;


   string stlType( ROOT::TMetaUtils::ShortTypeName(mTypename.c_str()) );
   string stlName;
   stlName = ROOT::TMetaUtils::ShortTypeName(m.getName().str().c_str());

   string fulName1,fulName2;
   const char *tcl1=0,*tcl2=0;
   const clang::TemplateArgument &arg0( tmplt_specialization->getTemplateArgs().get(0) );
   clang::QualType ti = arg0.getAsType();

   if (ROOT::TMetaUtils::ElementStreamer(*dictSrcOut, m, ti, 0, rwmode, interp)) {
      tcl1="R__tcl1";
      fulName1 = ti.getAsString(); // Should we be passing a context?
   }
   if (stltype==kMap || stltype==kMultiMap) {
      const clang::TemplateArgument &arg1( tmplt_specialization->getTemplateArgs().get(1) );
      clang::QualType tmplti = arg1.getAsType();
      if (ROOT::TMetaUtils::ElementStreamer(*dictSrcOut, m, tmplti, 0, rwmode, interp)) {
         tcl2="R__tcl2";
         fulName2 = tmplti.getAsString(); // Should we be passing a context?
      }
   }

   int isArr = 0;
   int len = 1;
   int pa = 0;
   const clang::ConstantArrayType *arrayType = llvm::dyn_cast<clang::ConstantArrayType>(m.getType().getTypePtr());
   if (arrayType) {
      isArr = 1;
      len =  GetFullArrayLength(arrayType);
      pa = 1;
      while (arrayType) {
         if (arrayType->getArrayElementTypeNoTypeQual()->isPointerType()) {
            pa = 3;
            break;
         }
         arrayType = llvm::dyn_cast<clang::ConstantArrayType>(arrayType->getArrayElementTypeNoTypeQual());
      }
   } else if (m.getType()->isPointerType()) {
      pa = 2;
   }
   if (rwmode == 0) {
      // create read code
      (*dictSrcOut) << "      {" << std::endl;
      if (isArr) {
         (*dictSrcOut) << "         for (Int_t R__l = 0; R__l < " << len << "; R__l++) {" << std::endl;
      }

      switch (pa) {
      case 0:         //No pointer && No array
         (*dictSrcOut) << "         " << stlType.c_str() << " &R__stl =  " << stlName.c_str() << ";" << std::endl;
         break;
      case 1:         //No pointer && array
         (*dictSrcOut) << "         " << stlType.c_str() << " &R__stl =  " << stlName.c_str() << "[R__l];" << std::endl;
         break;
      case 2:         //pointer && No array
         (*dictSrcOut) << "         delete *" << stlName.c_str() << ";"<< std::endl
                       << "         *" << stlName.c_str() << " = new " << stlType.c_str() << ";" << std::endl
                       << "         " << stlType.c_str() << " &R__stl = **" << stlName.c_str() << ";" << std::endl;
         break;
      case 3:         //pointer && array
         (*dictSrcOut) << "         delete " << stlName.c_str() << "[R__l];" << std::endl
                       << "         " << stlName.c_str() << "[R__l] = new " << stlType.c_str() << ";" << std::endl
                       << "         " << stlType.c_str() << " &R__stl = *" << stlName.c_str() << "[R__l];" << std::endl;
         break;
      }

      (*dictSrcOut) << "         R__stl.clear();" << std::endl;

      if (tcl1) {
         (*dictSrcOut) << "         TClass *R__tcl1 = TBuffer::GetClass(typeid(" << fulName1.c_str() << "));" << std::endl
                       << "         if (R__tcl1==0) {" << std::endl
                       << "            Error(\"" << stlName.c_str() << " streamer\",\"Missing the TClass object for "
                       << fulName1.c_str() << "!\");"  << std::endl
                       << "            return;" << std::endl
                       << "         }" << std::endl;
      }
      if (tcl2) {
         (*dictSrcOut) << "         TClass *R__tcl2 = TBuffer::GetClass(typeid(" << fulName2.c_str() << "));" << std::endl
                       << "         if (R__tcl2==0) {" << std::endl
                       << "            Error(\"" << stlName.c_str() << " streamer\",\"Missing the TClass object for "
                       << fulName2.c_str() <<"!\");" << std::endl
                       << "            return;" << std::endl
                       << "         }" << std::endl;
      }

      (*dictSrcOut) << "         int R__i, R__n;" << std::endl
                    << "         R__b >> R__n;" << std::endl;

      if (stltype==kVector) {
         (*dictSrcOut) << "         R__stl.reserve(R__n);" << std::endl;
      }
      (*dictSrcOut) << "         for (R__i = 0; R__i < R__n; R__i++) {" << std::endl;

      ROOT::TMetaUtils::ElementStreamer(*dictSrcOut, m, arg0.getAsType(), "R__t", rwmode, interp, tcl1);
      if (stltype == kMap || stltype == kMultiMap) {     //Second Arg
         const clang::TemplateArgument &arg1( tmplt_specialization->getTemplateArgs().get(1) );
         ROOT::TMetaUtils::ElementStreamer(*dictSrcOut, m, arg1.getAsType(), "R__t2", rwmode, interp, tcl2);
      }

      /* Need to go from
         type R__t;
         R__t.Stream;
         vec.push_back(R__t);
         to
         vec.push_back(type());
         R__t_p = &(vec.last());
         *R__t_p->Stream;

      */
      switch (stltype) {

      case kMap:
      case kMultiMap: {
         std::string keyName( ti.getAsString() );
         (*dictSrcOut) << "            typedef " << keyName << " Value_t;" << std::endl
                       << "            std::pair<Value_t const, " << tmplt_specialization->getTemplateArgs().get(1).getAsType().getAsString() << " > R__t3(R__t,R__t2);" << std::endl
                       << "            R__stl.insert(R__t3);" << std::endl;
         //fprintf(fp, "            R__stl.insert(%s::value_type(R__t,R__t2));\n",stlType.c_str());
         break;
      }
      case kSet:
      case kMultiSet:
         (*dictSrcOut) << "            R__stl.insert(R__t);" << std::endl;
         break;
      case kVector:
      case kList:
      case kDeque:
         (*dictSrcOut) << "            R__stl.push_back(R__t);" << std::endl;
         break;

      default:
         assert(0);
      }
      (*dictSrcOut) << "         }" << std::endl
                    << "      }" << std::endl;
      if (isArr) (*dictSrcOut) << "    }" << std::endl;

   } else {

      // create write code
      if (isArr) {
         (*dictSrcOut) << "         for (Int_t R__l = 0; R__l < " << len << "; R__l++) {" << std::endl;
      }
      (*dictSrcOut) << "      {" << std::endl;
      switch (pa) {
      case 0:         //No pointer && No array
         (*dictSrcOut) << "         " << stlType.c_str() << " &R__stl =  " << stlName.c_str() << ";" << std::endl;
         break;
      case 1:         //No pointer && array
         (*dictSrcOut) << "         " << stlType.c_str() << " &R__stl =  " << stlName.c_str() << "[R__l];" << std::endl;
         break;
      case 2:         //pointer && No array
         (*dictSrcOut) << "         " << stlType.c_str() << " &R__stl = **" << stlName.c_str() << ";" << std::endl;
         break;
      case 3:         //pointer && array
         (*dictSrcOut) << "         " << stlType.c_str() << " &R__stl = *" << stlName.c_str() << "[R__l];" << std::endl;
         break;
      }

      (*dictSrcOut) << "         int R__n=(&R__stl) ? int(R__stl.size()) : 0;" << std::endl
                    << "         R__b << R__n;" << std::endl
                    << "         if(R__n) {" << std::endl;

      if (tcl1) {
         (*dictSrcOut) << "         TClass *R__tcl1 = TBuffer::GetClass(typeid(" << fulName1.c_str() << "));" << std::endl
                       << "         if (R__tcl1==0) {" << std::endl
                       << "            Error(\"" << stlName.c_str() << " streamer\",\"Missing the TClass object for "
                       << fulName1.c_str() << "!\");" << std::endl
                       << "            return;" << std::endl
                       << "         }" << std::endl;
      }
      if (tcl2) {
         (*dictSrcOut) << "         TClass *R__tcl2 = TBuffer::GetClass(typeid(" << fulName2.c_str() << "));" << std::endl
                       << "         if (R__tcl2==0) {" << std::endl
                       << "            Error(\"" << stlName.c_str() << "streamer\",\"Missing the TClass object for " << fulName2.c_str() << "!\");" << std::endl
                       << "            return;" << std::endl
                       << "         }" << std::endl;
      }

      (*dictSrcOut) << "            " << stlType.c_str() << "::iterator R__k;" << std::endl
                    << "            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {" << std::endl;
      if (stltype == kMap || stltype == kMultiMap) {
         const clang::TemplateArgument &arg1( tmplt_specialization->getTemplateArgs().get(1) );
         clang::QualType tmplti = arg1.getAsType();
         ROOT::TMetaUtils::ElementStreamer(*dictSrcOut, m, ti, "((*R__k).first )",rwmode,interp, tcl1);
         ROOT::TMetaUtils::ElementStreamer(*dictSrcOut, m, tmplti, "((*R__k).second)",rwmode,interp, tcl2);
      } else {
         ROOT::TMetaUtils::ElementStreamer(*dictSrcOut, m, ti, "(*R__k)"         ,rwmode,interp,tcl1);
      }

      (*dictSrcOut) << "            }" << std::endl
                    << "         }" << std::endl
                    << "      }" << std::endl;
      if (isArr) (*dictSrcOut) << "    }" << std::endl;
   }
   return 1;
}

//______________________________________________________________________________
int STLStringStreamer(const clang::FieldDecl &m, int rwmode)
{
   // Create Streamer code for a standard string object. Returns 1 if data
   // member was a standard string and if Streamer code has been created,
   // 0 otherwise.

   std::string mTypenameStr;
   ROOT::TMetaUtils::R__GetQualifiedName(mTypenameStr, m.getType(),m);
   // Note: here we could to a direct type comparison!
   const char *mTypeName = ROOT::TMetaUtils::ShortTypeName(mTypenameStr.c_str());
   if (!strcmp(mTypeName, "string")) {

      std::string fieldname =  m.getName().str();
      if (rwmode == 0) {
         // create read mode
         if (m.getType()->isConstantArrayType()) {
            if (m.getType().getTypePtr()->getArrayElementTypeNoTypeQual()->isPointerType()) {
               (*dictSrcOut) << "// Array of pointer to std::string are not supported (" << fieldname << "\n";
            } else {
               std::stringstream fullIdx;
               const clang::ConstantArrayType *arrayType = llvm::dyn_cast<clang::ConstantArrayType>(m.getType().getTypePtr());
               int dim = 0;
               while (arrayType) {
                  (*dictSrcOut) << "      for (int R__i" << dim << "=0; R__i" << dim << "<"
                                << arrayType->getSize().getLimitedValue() << "; ++R__i" << dim << " )" << std::endl;
                  fullIdx << "[R__i" << dim << "]";
                  arrayType = llvm::dyn_cast<clang::ConstantArrayType>(arrayType->getArrayElementTypeNoTypeQual());
                  ++dim;
               }
               (*dictSrcOut) << "         { TString R__str; R__str.Streamer(R__b); "
                             << fieldname << fullIdx.str() << " = R__str.Data();}" << std::endl;
            }
         } else {
            (*dictSrcOut) << "      { TString R__str; R__str.Streamer(R__b); ";
            if (m.getType()->isPointerType())
               (*dictSrcOut) << "if (*" << fieldname << ") delete *" << fieldname << "; (*"
                             << fieldname << " = new string(R__str.Data())); }" << std::endl;
            else
               (*dictSrcOut) << fieldname << " = R__str.Data(); }" << std::endl;
         }
      } else {
         // create write mode
         if (m.getType()->isPointerType())
            (*dictSrcOut) << "      { TString R__str; if (*" << fieldname << ") R__str = (*"
                          << fieldname << ")->c_str(); R__str.Streamer(R__b);}" << std::endl;
         else if (m.getType()->isConstantArrayType()) {
            std::stringstream fullIdx;
            const clang::ConstantArrayType *arrayType = llvm::dyn_cast<clang::ConstantArrayType>(m.getType().getTypePtr());
            int dim = 0;
            while (arrayType) {
               (*dictSrcOut) << "      for (int R__i" << dim << "=0; R__i" << dim << "<"
                             << arrayType->getSize().getLimitedValue() << "; ++R__i" << dim << " )" << std::endl;
               fullIdx << "[R__i" << dim << "]";
               arrayType = llvm::dyn_cast<clang::ConstantArrayType>(arrayType->getArrayElementTypeNoTypeQual());
               ++dim;
            }
            (*dictSrcOut) << "         { TString R__str(" << fieldname << fullIdx.str() << ".c_str()); R__str.Streamer(R__b);}" << std::endl;
         } else
            (*dictSrcOut) << "      { TString R__str = " << fieldname << ".c_str(); R__str.Streamer(R__b);}" << std::endl;
      }
      return 1;
   }
   return 0;
}

//______________________________________________________________________________
bool isPointerToPointer(const clang::FieldDecl &m)
{
   if (m.getType()->isPointerType()) {
      if (m.getType()->getPointeeType()->isPointerType()) {
         return true;
      }
   }
   return false;
}

//______________________________________________________________________________
void WriteArrayDimensions(const clang::QualType &type)
{
   // Write "[0]" for all but the 1st dimension.

   const clang::ConstantArrayType *arrayType = llvm::dyn_cast<clang::ConstantArrayType>(type.getTypePtr());
   if (arrayType) {
      arrayType = llvm::dyn_cast<clang::ConstantArrayType>(arrayType->getArrayElementTypeNoTypeQual());
      while(arrayType) {
         (*dictSrcOut) << "[0]";
         arrayType = llvm::dyn_cast<clang::ConstantArrayType>(arrayType->getArrayElementTypeNoTypeQual());
      }
   }
}

//______________________________________________________________________________
void WriteClassFunctions(const clang::CXXRecordDecl *cl)
{
   // Write the code to set the class name and the initialization object.

   bool add_template_keyword = ROOT::TMetaUtils::NeedTemplateKeyword(cl);

   string fullname;
   string clsname;
   string nsname;
   int enclSpaceNesting = 0;

   if (ROOT::TMetaUtils::R__GetNameWithinNamespace(fullname,clsname,nsname,cl)) {
      enclSpaceNesting = ROOT::TMetaUtils::WriteNamespaceHeader(*dictSrcOut, cl);
   }

   (*dictSrcOut) << "//_______________________________________"
                 << "_______________________________________" << std::endl;
   if (add_template_keyword) (*dictSrcOut) << "template <> ";
   (*dictSrcOut) << "TClass *" << clsname.c_str() << "::fgIsA = 0;  // static to hold class pointer" << std::endl
                 << std::endl

                 << "//_______________________________________"
                 << "_______________________________________" << std::endl;
   if (add_template_keyword) (*dictSrcOut) << "template <> ";
   (*dictSrcOut) << "const char *" << clsname.c_str() << "::Class_Name()" << std::endl << "{" << std::endl
                 << "   return \"" << fullname.c_str() << "\";"  << std::endl <<"}" << std::endl << std::endl;

   (*dictSrcOut) << "//_______________________________________"
                 << "_______________________________________" << std::endl;
   if (add_template_keyword) (*dictSrcOut) << "template <> ";
   (*dictSrcOut) << "const char *" << clsname.c_str() << "::ImplFileName()"  << std::endl << "{" << std::endl
                 << "   return ::ROOT::GenerateInitInstanceLocal((const ::" << fullname.c_str()
                 << "*)0x0)->GetImplFileName();" << std::endl << "}" << std::endl << std::endl

                 << "//_______________________________________"
                 << "_______________________________________" << std::endl;
   if (add_template_keyword) (*dictSrcOut) <<"template <> ";
   (*dictSrcOut) << "int " << clsname.c_str() << "::ImplFileLine()" << std::endl << "{" << std::endl
                 << "   return ::ROOT::GenerateInitInstanceLocal((const ::" << fullname.c_str()
                 << "*)0x0)->GetImplFileLine();" << std::endl << "}" << std::endl << std::endl

                 << "//_______________________________________"
                 << "_______________________________________" << std::endl;
   if (add_template_keyword) (*dictSrcOut) << "template <> ";
   (*dictSrcOut) << "void " << clsname.c_str() << "::Dictionary()" << std::endl << "{" << std::endl
                 << "   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::" << fullname.c_str()
                 << "*)0x0)->GetClass();" << std::endl
                 << "}" << std::endl << std::endl

                 << "//_______________________________________"
                 << "_______________________________________" << std::endl;
   if (add_template_keyword) (*dictSrcOut) << "template <> ";
   (*dictSrcOut) << "TClass *" << clsname.c_str() << "::Class()" << std::endl << "{" << std::endl;
   (*dictSrcOut) << "   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::";
   (*dictSrcOut) << fullname.c_str() << "*)0x0)->GetClass();" << std::endl
                 << "   return fgIsA;" << std::endl
                 << "}" << std::endl << std::endl;

   while (enclSpaceNesting) {
      (*dictSrcOut) << "} // namespace " << nsname << std::endl;
      --enclSpaceNesting;
   }
}

//______________________________________________________________________________
void WriteNamespaceInit(const clang::NamespaceDecl *cl)
{
   // Write the code to initialize the namespace name and the initialization object.

   if (cl->isAnonymousNamespace()) {
      // Don't write a GenerateInitInstance for the anonymous namespaces.
      return;
   }

   // coverity[fun_call_w_exception] - that's just fine.
   string classname = ROOT::TMetaUtils::R__GetQualifiedName(*cl).c_str();
   string mappedname;
   TMetaUtils::GetCppName(mappedname,classname.c_str());

   int nesting = 0;
   // We should probably unwind the namespace to properly nest it.
   if (classname!="ROOT") {
      string right = classname;
      int pos = right.find(":");
      if (pos==0) {
         right = right.substr(2);
         pos = right.find(":");
      }
      while(pos>=0) {
         string left = right.substr(0,pos);
         right = right.substr(pos+2);
         pos = right.find(":");
         ++nesting;
         (*dictSrcOut) << "namespace " << left << " {" << std::endl;
      }

      ++nesting;
      (*dictSrcOut) << "namespace " << right << " {" << std::endl;
   }

   (*dictSrcOut) << "   namespace ROOT {" << std::endl;

#if !defined(R__AIX)
   (*dictSrcOut) << "      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();" << std::endl;
#endif

   if (!Namespace__HasMethod(cl,"Dictionary"))
      (*dictSrcOut) << "      static void " << mappedname.c_str() << "_Dictionary();" << std::endl;
   (*dictSrcOut) << std::endl

   << "      // Function generating the singleton type initializer" << std::endl

#if !defined(R__AIX)
   << "      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()" << std::endl
   << "      {" << std::endl
#else
   << "      ::ROOT::TGenericClassInfo *GenerateInitInstance()" << std::endl
   << "      {" << std::endl
#endif

   << "         static ::ROOT::TGenericClassInfo " << std::endl

   << "            instance(\"" << classname.c_str() << "\", ";

   if (Namespace__HasMethod(cl,"Class_Version")) {
      (*dictSrcOut) << "::" << classname.c_str() << "::Class_Version(), ";
   } else {
      (*dictSrcOut) << "0 /*version*/, ";
   }

   std::string filename = ROOT::TMetaUtils::GetFileName(cl);
   for (unsigned int i=0; i<filename.length(); i++) {
      if (filename[i]=='\\') filename[i]='/';
   }
   (*dictSrcOut) << "\"" << filename << "\", " << ROOT::TMetaUtils::R__GetLineNumber(cl) << "," << std::endl
                 << "                     ::ROOT::DefineBehavior((void*)0,(void*)0)," << std::endl
                 << "                     ";

   if (Namespace__HasMethod(cl,"Dictionary")) {
      (*dictSrcOut) << "&::" << classname.c_str() << "::Dictionary, ";
   } else {
      (*dictSrcOut) << "&" << mappedname.c_str() << "_Dictionary, ";
   }

   (*dictSrcOut) << 0 << ");" << std::endl

   << "         return &instance;" << std::endl
   << "      }" << std::endl
   << "      // Insure that the inline function is _not_ optimized away by the compiler\n"
   << "      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  " << std::endl
   << "      // Static variable to force the class initialization" << std::endl
   // must be one long line otherwise R__UseDummy does not work
   << "      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance();"
   << " R__UseDummy(_R__UNIQUE_(Init));" << std::endl;

   if (!Namespace__HasMethod(cl,"Dictionary")) {
      (*dictSrcOut) <<  std::endl << "      // Dictionary for non-ClassDef classes" << std::endl
      << "      static void " << mappedname.c_str() << "_Dictionary() {" << std::endl
      << "         GenerateInitInstance()->GetClass();" << std::endl
      << "      }" << std::endl << std::endl;
   }

   (*dictSrcOut) << "   }" << std::endl;
   while(nesting--) {
      (*dictSrcOut) << "}" << std::endl;
   }
   (*dictSrcOut) <<  std::endl;
}

//______________________________________________________________________________
const char *GrabIndex(const clang::FieldDecl &member, int printError)
{
   // GrabIndex returns a static string (so use it or copy it immediatly, do not
   // call GrabIndex twice in the same expression) containing the size of the
   // array data member.
   // In case of error, or if the size is not specified, GrabIndex returns 0.

   int error;
   const char *where = 0;

   const char *index = ROOT::TMetaUtils::DataMemberInfo__ValidArrayIndex(member,&error, &where);
   if (index==0 && printError) {
      const char *errorstring;
      switch (error) {
      case TMetaUtils::NOT_INT:
         errorstring = "is not an integer";
         break;
      case TMetaUtils::NOT_DEF:
         errorstring = "has not been defined before the array";
         break;
      case TMetaUtils::IS_PRIVATE:
         errorstring = "is a private member of a parent class";
         break;
      case TMetaUtils::UNKNOWN:
         errorstring = "is not known";
         break;
      default:
         errorstring = "UNKNOWN ERROR!!!!";
      }

      if (where==0) {
         ROOT::TMetaUtils::Error(0, "*** Datamember %s::%s: no size indication!\n",
               member.getParent()->getName().str().c_str(), member.getName().str().c_str());
      } else {
         ROOT::TMetaUtils::Error(0,"*** Datamember %s::%s: size of array (%s) %s!\n",
               member.getParent()->getName().str().c_str(), member.getName().str().c_str(), where, errorstring);
      }
   }
   return index;
}

//______________________________________________________________________________
void WriteStreamer(const ROOT::TMetaUtils::AnnotatedRecordDecl &cl,
                   const cling::Interpreter &interp,
                   const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt)
{
   const clang::CXXRecordDecl *clxx = llvm::dyn_cast<clang::CXXRecordDecl>(cl.GetRecordDecl());
   if (clxx == 0) return;

   bool add_template_keyword = ROOT::TMetaUtils::NeedTemplateKeyword(clxx);

   string fullname;
   string clsname;
   string nsname;
   int enclSpaceNesting = 0;

   if (ROOT::TMetaUtils::R__GetNameWithinNamespace(fullname,clsname,nsname,clxx)) {
      enclSpaceNesting = ROOT::TMetaUtils::WriteNamespaceHeader(*dictSrcOut, cl);
   }

   (*dictSrcOut) << "//_______________________________________"
                 << "_______________________________________" << std::endl;
   if (add_template_keyword) (*dictSrcOut) << "template <> ";
   (*dictSrcOut) << "void " << clsname << "::Streamer(TBuffer &R__b)"  << std::endl << "{" << std::endl
                 << "   // Stream an object of class " << fullname << "." << std::endl << std::endl;

   // In case of VersionID<=0 write dummy streamer only calling
   // its base class Streamer(s). If no base class(es) let Streamer
   // print error message, i.e. this Streamer should never have been called.
   int version = ROOT::TMetaUtils::GetClassVersion(clxx, interp);
   if (version <= 0) {
      // We also need to look at the base classes.
      int basestreamer = 0;
      for(clang::CXXRecordDecl::base_class_const_iterator iter = clxx->bases_begin(), end = clxx->bases_end();
          iter != end;
          ++iter)
      {
         if (ROOT::TMetaUtils::ClassInfo__HasMethod(iter->getType()->getAsCXXRecordDecl (),"Streamer", interp)) {
            string base_fullname;
            ROOT::TMetaUtils::R__GetQualifiedName(base_fullname,* iter->getType()->getAsCXXRecordDecl ());

            if (strstr(base_fullname.c_str(),"::")) {
               // there is a namespace involved, trigger MS VC bug workaround
               (*dictSrcOut) << "   //This works around a msvc bug and should be harmless on other platforms" << std::endl
                             << "   typedef " << base_fullname << " baseClass" << basestreamer << ";" << std::endl
                             << "   baseClass" << basestreamer << "::Streamer(R__b);" << std::endl;
            }
            else {
               (*dictSrcOut) << "   " << base_fullname << "::Streamer(R__b);" << std::endl;
            }
            basestreamer++;
         }
      }
      if (!basestreamer) {
         (*dictSrcOut) << "   ::Error(\"" << fullname << "::Streamer\", \"version id <=0 in ClassDef,"
            " dummy Streamer() called\"); if (R__b.IsReading()) { }" << std::endl;
      }
      (*dictSrcOut) << "}" << std::endl << std::endl;
      while (enclSpaceNesting) {
         (*dictSrcOut) << "} // namespace " << nsname.c_str() << std::endl;
         --enclSpaceNesting;
      }
      return;
   }

   // loop twice: first time write reading code, second time writing code
   string classname = fullname;
   if (strstr(fullname.c_str(),"::")) {
      // there is a namespace involved, trigger MS VC bug workaround
      (*dictSrcOut) << "   //This works around a msvc bug and should be harmless on other platforms" << std::endl
                    << "   typedef ::" << fullname << " thisClass;" << std::endl;
      classname = "thisClass";
   }
   for (int i = 0; i < 2; i++) {

      int decli = 0;

      if (i == 0) {
         (*dictSrcOut) << "   UInt_t R__s, R__c;" << std::endl;
         (*dictSrcOut) << "   if (R__b.IsReading()) {" << std::endl;
         (*dictSrcOut) << "      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }" << std::endl;
      } else {
         (*dictSrcOut) << "      R__b.CheckByteCount(R__s, R__c, " << classname.c_str() << "::IsA());" << std::endl;
         (*dictSrcOut) << "   } else {" << std::endl;
         (*dictSrcOut) << "      R__c = R__b.WriteVersion(" << classname.c_str() << "::IsA(), kTRUE);" << std::endl;
      }

      // Stream base class(es) when they have the Streamer() method
      int base=0;
      for(clang::CXXRecordDecl::base_class_const_iterator iter = clxx->bases_begin(), end = clxx->bases_end();
          iter != end;
          ++iter)
      {
         if (ROOT::TMetaUtils::ClassInfo__HasMethod(iter->getType()->getAsCXXRecordDecl (),"Streamer", interp)) {
            string base_fullname;
            ROOT::TMetaUtils::R__GetQualifiedName(base_fullname,* iter->getType()->getAsCXXRecordDecl ());

            if (strstr(base_fullname.c_str(),"::")) {
               // there is a namespace involved, trigger MS VC bug workaround
               (*dictSrcOut) << "      //This works around a msvc bug and should be harmless on other platforms" << std::endl
                             << "      typedef " << base_fullname << " baseClass" << base << ";" << std::endl
                             << "      baseClass" << base << "::Streamer(R__b);" << std::endl;
               ++base;
            }
            else {
               (*dictSrcOut) << "      " << base_fullname << "::Streamer(R__b);" << std::endl;
            }
         }
      }
      // Stream data members
      // Loop over the non static data member.
      for(clang::RecordDecl::field_iterator field_iter = clxx->field_begin(), end = clxx->field_end();
          field_iter != end;
          ++field_iter)
      {
         const char *comment = ROOT::TMetaUtils::GetComment( **field_iter ).data();

         clang::QualType type = field_iter->getType();
         std::string type_name = type.getAsString(clxx->getASTContext().getPrintingPolicy());

         const clang::Type *underling_type = ROOT::TMetaUtils::GetUnderlyingType(type);

         // we skip:
         //  - static members
         //  - members with an ! as first character in the title (comment) field

         //special case for Float16_t
         int isFloat16=0;
         if (strstr(type_name.c_str(),"Float16_t")) isFloat16=1;

         //special case for Double32_t
         int isDouble32=0;
         if (strstr(type_name.c_str(),"Double32_t")) isDouble32=1;

         // No need to test for static, there are not in this list.
         if (strncmp(comment, "!", 1)) {

            // fundamental type: short, int, long, etc....
            if (underling_type->isFundamentalType() || underling_type->isEnumeralType()) {
               if (type.getTypePtr()->isConstantArrayType() &&
                   type.getTypePtr()->getArrayElementTypeNoTypeQual()->isPointerType() )
               {
                  const clang::ConstantArrayType *arrayType = llvm::dyn_cast<clang::ConstantArrayType>(type.getTypePtr());
                  int s = GetFullArrayLength(arrayType);

                  if (!decli) {
                     (*dictSrcOut) << "      int R__i;" << std::endl;
                     decli = 1;
                  }
                  (*dictSrcOut) << "      for (R__i = 0; R__i < " << s << "; R__i++)" << std::endl;
                  if (i == 0) {
                     ROOT::TMetaUtils::Error(0, "*** Datamember %s::%s: array of pointers to fundamental type (need manual intervention)\n", fullname.c_str(), field_iter->getName().str().c_str());
                     (*dictSrcOut) << "         ;//R__b.ReadArray(" << field_iter->getName().str() << ");" << std::endl;
                  } else {
                     (*dictSrcOut) << "         ;//R__b.WriteArray(" << field_iter->getName().str() << ", __COUNTER__);" << std::endl;
                  }
               } else if (type.getTypePtr()->isPointerType()) {
                  const char *indexvar = GrabIndex(**field_iter, i==0);
                  if (indexvar==0) {
                     if (i == 0) {
                        ROOT::TMetaUtils::Error(0,"*** Datamember %s::%s: pointer to fundamental type (need manual intervention)\n", fullname.c_str(), field_iter->getName().str().c_str());
                        (*dictSrcOut) << "      //R__b.ReadArray(" << field_iter->getName().str() << ");" << std::endl;
                     } else {
                        (*dictSrcOut) << "      //R__b.WriteArray(" << field_iter->getName().str() << ", __COUNTER__);" << std::endl;
                     }
                  } else {
                     if (i == 0) {
                        (*dictSrcOut) << "      delete [] " << field_iter->getName().str() << ";" << std::endl
                                      << "      " << GetNonConstMemberName(**field_iter) << " = new "
                                      << ROOT::TMetaUtils::ShortTypeName(**field_iter) << "[" << indexvar << "];" << std::endl;
                        if (isFloat16) {
                           (*dictSrcOut) << "      R__b.ReadFastArrayFloat16(" <<  GetNonConstMemberName(**field_iter)
                                         << "," << indexvar << ");" << std::endl;
                        } else if (isDouble32) {
                           (*dictSrcOut) << "      R__b.ReadFastArrayDouble32(" <<  GetNonConstMemberName(**field_iter)
                                         << "," << indexvar << ");" << std::endl;
                        } else {
                           (*dictSrcOut) << "      R__b.ReadFastArray(" << GetNonConstMemberName(**field_iter)
                                         << "," << indexvar << ");" << std::endl;
                        }
                     } else {
                        if (isFloat16) {
                           (*dictSrcOut) << "      R__b.WriteFastArrayFloat16("
                                         << field_iter->getName().str() << "," << indexvar << ");" << std::endl;
                        } else if (isDouble32) {
                           (*dictSrcOut) << "      R__b.WriteFastArrayDouble32("
                                         << field_iter->getName().str() << "," << indexvar << ");" << std::endl;
                        } else {
                           (*dictSrcOut) << "      R__b.WriteFastArray("
                                         << field_iter->getName().str() << "," << indexvar << ");" << std::endl;
                        }
                     }
                  }
               } else if (type.getTypePtr()->isArrayType()) {
                  if (i == 0) {
                     if (type.getTypePtr()->getArrayElementTypeNoTypeQual()->isArrayType()) { // if (m.ArrayDim() > 1) {
                        if ( underling_type->isEnumeralType() )
                           (*dictSrcOut) << "      R__b.ReadStaticArray((Int_t*)" << field_iter->getName().str() << ");" << std::endl;
                        else {
                           if (isFloat16) {
                              (*dictSrcOut) << "      R__b.ReadStaticArrayFloat16((" << ROOT::TMetaUtils::R__TrueName(**field_iter)
                                            << "*)" << field_iter->getName().str() << ");" << std::endl;
                           } else if (isDouble32) {
                              (*dictSrcOut) << "      R__b.ReadStaticArrayDouble32((" << ROOT::TMetaUtils::R__TrueName(**field_iter)
                                            << "*)" << field_iter->getName().str() << ");" << std::endl;
                           } else {
                              (*dictSrcOut) << "      R__b.ReadStaticArray((" << ROOT::TMetaUtils::R__TrueName(**field_iter)
                                            << "*)" << field_iter->getName().str() << ");" << std::endl;
                           }
                        }
                     } else {
                        if ( underling_type->isEnumeralType() ) {
                           (*dictSrcOut) << "      R__b.ReadStaticArray((Int_t*)" << field_iter->getName().str() << ");" << std::endl;
                        } else {
                           if (isFloat16) {
                              (*dictSrcOut) << "      R__b.ReadStaticArrayFloat16(" << field_iter->getName().str() << ");" << std::endl;
                           } else if (isDouble32) {
                              (*dictSrcOut) << "      R__b.ReadStaticArrayDouble32(" << field_iter->getName().str() << ");" << std::endl;
                           } else {
                              (*dictSrcOut) << "      R__b.ReadStaticArray((" << ROOT::TMetaUtils::R__TrueName(**field_iter)
                                            << "*)" << field_iter->getName().str() << ");" << std::endl;
                           }
                        }
                     }
                  } else {
                     const clang::ConstantArrayType *arrayType = llvm::dyn_cast<clang::ConstantArrayType>(type.getTypePtr());
                     int s = GetFullArrayLength(arrayType);

                     if (type.getTypePtr()->getArrayElementTypeNoTypeQual()->isArrayType()) {// if (m.ArrayDim() > 1) {
                        if ( underling_type->isEnumeralType() )
                           (*dictSrcOut) << "      R__b.WriteArray((Int_t*)" << field_iter->getName().str() << ", "
                                         << s << ");" << std::endl;
                        else
                           if (isFloat16) {
                              (*dictSrcOut) << "      R__b.WriteArrayFloat16((" << ROOT::TMetaUtils::R__TrueName(**field_iter)
                                            << "*)" << field_iter->getName().str() << ", " << s << ");" << std::endl;
                           } else if (isDouble32) {
                              (*dictSrcOut) << "      R__b.WriteArrayDouble32((" << ROOT::TMetaUtils::R__TrueName(**field_iter)
                                            << "*)" << field_iter->getName().str() << ", " << s << ");" << std::endl;
                           } else {
                              (*dictSrcOut) << "      R__b.WriteArray((" << ROOT::TMetaUtils::R__TrueName(**field_iter)
                                            << "*)" << field_iter->getName().str() << ", " << s << ");" << std::endl;
                           }
                     } else {
                        if ( underling_type->isEnumeralType() )
                           (*dictSrcOut) << "      R__b.WriteArray((Int_t*)" << field_iter->getName().str() << ", " << s << ");" << std::endl;
                        else
                           if (isFloat16) {
                              (*dictSrcOut) << "      R__b.WriteArrayFloat16(" << field_iter->getName().str() << ", " << s << ");" << std::endl;
                           } else if (isDouble32) {
                              (*dictSrcOut) << "      R__b.WriteArrayDouble32(" << field_iter->getName().str() << ", " << s << ");" << std::endl;
                           } else {
                              (*dictSrcOut) << "      R__b.WriteArray(" << field_iter->getName().str() << ", " << s << ");" << std::endl;
                           }
                     }
                  }
               } else if ( underling_type->isEnumeralType() ) {
                  if (i == 0) {
                     (*dictSrcOut) << "      void *ptr_" << field_iter->getName().str() << " = (void*)&" << field_iter->getName().str() << ";\n";
                     (*dictSrcOut) << "      R__b >> *reinterpret_cast<Int_t*>(ptr_" << field_iter->getName().str() << ");" << std::endl;
                  } else
                     (*dictSrcOut) << "      R__b << (Int_t)" << field_iter->getName().str() << ";" << std::endl;
               } else {
                  if (isFloat16) {
                     if (i == 0)
                        (*dictSrcOut) << "      {float R_Dummy; R__b >> R_Dummy; " << GetNonConstMemberName(**field_iter)
                                      << "=Float16_t(R_Dummy);}" << std::endl;
                     else
                        (*dictSrcOut) << "      R__b << float(" << GetNonConstMemberName(**field_iter) << ");" << std::endl;
                  } else if (isDouble32) {
                     if (i == 0)
                        (*dictSrcOut) << "      {float R_Dummy; R__b >> R_Dummy; " << GetNonConstMemberName(**field_iter)
                                      << "=Double32_t(R_Dummy);}" << std::endl;
                     else
                        (*dictSrcOut) << "      R__b << float(" << GetNonConstMemberName(**field_iter) << ");" << std::endl;
                  } else {
                     if (i == 0)
                        (*dictSrcOut) << "      R__b >> " << GetNonConstMemberName(**field_iter) << ";" << std::endl;
                     else
                        (*dictSrcOut) << "      R__b << " << GetNonConstMemberName(**field_iter) << ";" << std::endl;
                  }
               }
            } else {
               // we have an object...

               // check if object is a standard string
               if (STLStringStreamer(**field_iter, i))
                  continue;

               // check if object is an STL container
               if (STLContainerStreamer(**field_iter, i, interp, normCtxt))
                  continue;

               // handle any other type of objects
               if (type.getTypePtr()->isConstantArrayType() &&
                   type.getTypePtr()->getArrayElementTypeNoTypeQual()->isPointerType())
               {
                  const clang::ConstantArrayType *arrayType = llvm::dyn_cast<clang::ConstantArrayType>(type.getTypePtr());
                  int s = GetFullArrayLength(arrayType);

                  if (!decli) {
                     (*dictSrcOut) << "      int R__i;" << std::endl;
                     decli = 1;
                  }
                  (*dictSrcOut) << "      for (R__i = 0; R__i < " << s << "; R__i++)" << std::endl;
                  if (i == 0)
                     (*dictSrcOut) << "         R__b >> " << GetNonConstMemberName(**field_iter);
                  else {
                     if (ROOT::TMetaUtils::R__IsBase(**field_iter,"TObject", interp) && ROOT::TMetaUtils::R__IsBase(**field_iter,"TArray", interp))
                        (*dictSrcOut) << "         R__b << (TObject*)" << field_iter->getName().str();
                     else
                        (*dictSrcOut) << "         R__b << " << GetNonConstMemberName(**field_iter);
                  }
                  WriteArrayDimensions(field_iter->getType());
                  (*dictSrcOut) << "[R__i];" << std::endl;
               } else if (type.getTypePtr()->isPointerType()) {
                  // This is always good. However, in case of a pointer
                  // to an object that is guarenteed to be there and not
                  // being referenced by other objects we could use
                  //     xx->Streamer(b);
                  // Optimize this with control statement in title.
                  if (isPointerToPointer(**field_iter)) {
                     if (i == 0) {
                        ROOT::TMetaUtils::Error(0, "*** Datamember %s::%s: pointer to pointer (need manual intervention)\n", fullname.c_str(), field_iter->getName().str().c_str());
                        (*dictSrcOut) << "      //R__b.ReadArray(" << field_iter->getName().str() << ");" << std::endl;
                     } else {
                        (*dictSrcOut) << "      //R__b.WriteArray(" << field_iter->getName().str() << ", __COUNTER__);";
                     }
                  } else {
                     if (ROOT::TMetaUtils::R__GetQualifiedName(*ROOT::TMetaUtils::GetUnderlyingType(field_iter->getType()),**field_iter) == "TClonesArray") {
                        (*dictSrcOut) << "      " << field_iter->getName().str() << "->Streamer(R__b);" << std::endl;
                     } else {
                        if (i == 0) {
                           // The following:
                           //    if (strncmp(m.Title(),"->",2) != 0) fprintf(fp, "      delete %s;\n", GetNonConstMemberName(**field_iter).c_str());
                           // could be used to prevent a memory leak since the next statement could possibly create a new object.
                           // In the TStreamerInfo based I/O we made the previous statement conditional on TStreamerInfo::CanDelete
                           // to allow the user to prevent some inadvisable deletions.  So we should be offering this flexibility
                           // here to and should not (technically) rely on TStreamerInfo for it, so for now we leave it as is.
                           // Note that the leak should happen from here only if the object is stored in an unsplit object
                           // and either the user request an old branch or the streamer has been customized.
                           (*dictSrcOut) << "      R__b >> " << GetNonConstMemberName(**field_iter) << ";" << std::endl;
                        } else {
                           if (ROOT::TMetaUtils::R__IsBase(**field_iter,"TObject",interp) && ROOT::TMetaUtils::R__IsBase(**field_iter,"TArray",interp))
                              (*dictSrcOut) << "      R__b << (TObject*)" << field_iter->getName().str() << ";" << std::endl;
                           else
                              (*dictSrcOut) << "      R__b << " << GetNonConstMemberName(**field_iter) << ";" << std::endl;
                        }
                     }
                  }
               } else if (type.getTypePtr()->isArrayType()) {
                  const clang::ConstantArrayType *arrayType = llvm::dyn_cast<clang::ConstantArrayType>(type.getTypePtr());
                  int s = GetFullArrayLength(arrayType);

                  if (!decli) {
                     (*dictSrcOut) << "      int R__i;" << std::endl;
                     decli = 1;
                  }
                  (*dictSrcOut) << "      for (R__i = 0; R__i < " << s << "; R__i++)" << std::endl;
                  std::string mTypeNameStr;
                  ROOT::TMetaUtils::R__GetQualifiedName(mTypeNameStr,field_iter->getType(),**field_iter);
                  const char *mTypeName = mTypeNameStr.c_str();
                  const char *constwd = "const ";
                  if (strncmp(constwd,mTypeName,strlen(constwd))==0) {
                     mTypeName += strlen(constwd);
                     (*dictSrcOut) << "         const_cast< " << mTypeName << " &>(" << field_iter->getName().str();
                     WriteArrayDimensions(field_iter->getType());
                     (*dictSrcOut) << "[R__i]).Streamer(R__b);" << std::endl;
                  } else {
                     (*dictSrcOut) << "         " << GetNonConstMemberName(**field_iter);
                     WriteArrayDimensions(field_iter->getType());
                     (*dictSrcOut) << "[R__i].Streamer(R__b);" << std::endl;
                  }
               } else {
                  if (ROOT::TMetaUtils::ClassInfo__HasMethod(ROOT::TMetaUtils::R__GetUnderlyingRecordDecl(field_iter->getType()),"Streamer", interp))
                     (*dictSrcOut) << "      " << GetNonConstMemberName(**field_iter) << ".Streamer(R__b);" << std::endl;
                  else {
                     (*dictSrcOut) << "      R__b.StreamObject(&(" << field_iter->getName().str() << "),typeid("
                                   << field_iter->getName().str() << "));" << std::endl;               //R__t.Streamer(R__b);\n");
                     //VP                     if (i == 0)
                     //VP                        Error(0, "*** Datamember %s::%s: object has no Streamer() method (need manual intervention)\n",
                     //VP                                  fullname, field_iter->getName().str());
                     //VP                     fprintf(fp, "      //%s.Streamer(R__b);\n", m.Name());
                  }
               }
            }
         }
      }
   }
   (*dictSrcOut) << "      R__b.SetByteCount(R__c, kTRUE);" << std::endl;
   (*dictSrcOut) << "   }" << std::endl
                 << "}" << std::endl << std::endl;

   while (enclSpaceNesting) {
      (*dictSrcOut) << "} // namespace " << nsname.c_str() << std::endl;
      --enclSpaceNesting;
   }
}

//______________________________________________________________________________
void WriteAutoStreamer(const ROOT::TMetaUtils::AnnotatedRecordDecl &cl,
                       const cling::Interpreter &interp,
                       const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt)
{

   // Write Streamer() method suitable for automatic schema evolution.

   const clang::CXXRecordDecl *clxx = llvm::dyn_cast<clang::CXXRecordDecl>(cl.GetRecordDecl());
   if (clxx == 0) return;

   bool add_template_keyword = ROOT::TMetaUtils::NeedTemplateKeyword(clxx);

   // We also need to look at the base classes.
   for(clang::CXXRecordDecl::base_class_const_iterator iter = clxx->bases_begin(), end = clxx->bases_end();
       iter != end;
       ++iter)
   {
      int k = ROOT::TMetaUtils::IsSTLContainer(*iter);
      if (k!=0) {
         RStl::Instance().GenerateTClassFor( iter->getType(), interp, normCtxt );
      }
   }

   string fullname;
   string clsname;
   string nsname;
   int enclSpaceNesting = 0;

   if (ROOT::TMetaUtils::R__GetNameWithinNamespace(fullname,clsname,nsname,clxx)) {
      enclSpaceNesting = ROOT::TMetaUtils::WriteNamespaceHeader(*dictSrcOut, cl);
   }

   (*dictSrcOut) << "//_______________________________________"
                 << "_______________________________________" << std::endl;
   if (add_template_keyword) (*dictSrcOut) << "template <> ";
   (*dictSrcOut) << "void " << clsname << "::Streamer(TBuffer &R__b)" << std::endl
                 << "{" << std::endl
                 << "   // Stream an object of class " << fullname << "." << std::endl << std::endl
                 << "   if (R__b.IsReading()) {" << std::endl
                 << "      R__b.ReadClassBuffer(" << fullname << "::Class(),this);" << std::endl
                 << "   } else {" << std::endl
                 << "      R__b.WriteClassBuffer(" << fullname << "::Class(),this);" << std::endl
                 << "   }" << std::endl
                 << "}" << std::endl << std::endl;

   while (enclSpaceNesting) {
      (*dictSrcOut) << "} // namespace " << nsname << std::endl;
      --enclSpaceNesting;
   }
}

//______________________________________________________________________________
void CallWriteStreamer(const ROOT::TMetaUtils::AnnotatedRecordDecl &cl,
                       const cling::Interpreter &interp,
                       const ROOT::TMetaUtils::TNormalizedCtxt &normCtxt,
                       bool isAutoStreamer) {
   if (isAutoStreamer) {
      WriteAutoStreamer(cl, interp, normCtxt);
   } else {
      WriteStreamer(cl, interp, normCtxt);
   }
}

//______________________________________________________________________________
void WriteBodyShowMembers(const ROOT::TMetaUtils::AnnotatedRecordDecl &cl,
                          bool outside,
                          const cling::Interpreter &interp)
{
   string csymbol;
   ROOT::TMetaUtils::R__GetQualifiedName(csymbol,*cl);

   if ( !TMetaUtils::IsStdClass(*cl) ) {

      // Prefix the full class name with '::' except for the STL
      // containers and std::string.  This is to request the
      // real class instead of the class in the namespace ROOT::Shadow
      csymbol.insert(0,"::");
   }

   std::string getClass;
   if (ROOT::TMetaUtils::ClassInfo__HasMethod(cl,"IsA",interp) && !outside) {
      getClass = csymbol + "::IsA()";
   } else {
      getClass = "::ROOT::GenerateInitInstanceLocal((const ";
      getClass += csymbol + "*)0x0)->GetClass()";
   }
   if (outside) {
      (*dictSrcOut) << "   gInterpreter->InspectMembers(R__insp, obj, "
                    << getClass << ");" << std::endl;
   } else {
      (*dictSrcOut) << "   gInterpreter->InspectMembers(R__insp, this, "
                    << getClass << ");" << std::endl;
   }
}

//______________________________________________________________________________
void GenerateLinkdef(int *argc, char **argv, int firstInputFile,
                     std::string &code_for_parser)
{
   code_for_parser += "#ifdef __CINT__\n\n";
   code_for_parser += "#pragma link off all globals;\n";
   code_for_parser += "#pragma link off all classes;\n";
   code_for_parser += "#pragma link off all functions;\n\n";

   for (int i = firstInputFile; i < *argc; i++) {
      char *s, trail[3];
      int   nostr = 0, noinp = 0, bcnt = 0, l = strlen(argv[i])-1;
      for (int j = 0; j < 3; j++) {
         if (argv[i][l] == '-') {
            argv[i][l] = '\0';
            nostr = 1;
            l--;
         }
         if (argv[i][l] == '!') {
            argv[i][l] = '\0';
            noinp = 1;
            l--;
         }
         if (argv[i][l] == '+') {
            argv[i][l] = '\0';
            bcnt = 1;
            l--;
         }
      }
      if (nostr || noinp) {
         trail[0] = 0;
         if (nostr) strlcat(trail, "-",3);
         if (noinp) strlcat(trail, "!",3);
      }
      if (bcnt) {
         strlcpy(trail, "+",3);
         if (nostr)
            ROOT::TMetaUtils::Error(0, "option + mutual exclusive with -\n");
      }
      char *cls = strrchr(argv[i], '/');
      if (!cls) cls = strrchr(argv[i], '\\');
      if (cls)
         cls++;
      else
         cls = argv[i];
      if ((s = strrchr(cls, '.'))) *s = '\0';
      code_for_parser += "#pragma link C++ class ";
      code_for_parser += cls;
      if (nostr || noinp || bcnt)
         code_for_parser += trail;
      code_for_parser += ";\n";
      if (s) *s = '.';
   }

   code_for_parser += "\n#endif\n";
}

//______________________________________________________________________________
bool Which(cling::Interpreter &interp, const char *fname, string& pname)
{
   // Find file name in path specified via -I statements to Cling.
   // Return false if the file can not be found.
   // If the file is found, set pname to the full path name and return true.

   FILE *fp = 0;

   pname = fname;
#ifdef WIN32
   fp = fopen(pname.c_str(), "rb");
#else
   fp = fopen(pname.c_str(), "r");
#endif
   if (fp) {
      fclose(fp);
      return true;
   }

   llvm::SmallVector<std::string, 10> includePaths;//Why 10? Hell if I know.
   //false - no system header, false - with flags.
   interp.GetIncludePaths(includePaths, false, false);

   const size_t nPaths = includePaths.size();
   for (size_t i = 0; i < nPaths; i += 1 /* 2 */) {

      pname = includePaths[i].c_str();
#ifdef WIN32
      pname += "\\";
      static const char* fopenopts = "rb";
#else
      pname += "/";
      static const char* fopenopts = "r";
#endif
      pname += fname;
      fp = fopen(pname.c_str(), fopenopts);
      if (fp) {
         fclose(fp);
         return true;
      }
   }
   pname = "";
   return false;
}

//______________________________________________________________________________
const char *CopyArg(const char *original)
{
   // If the argument starts with MODULE/inc, strip it
   // to make it the name we can use in #includes.

#ifdef ROOTBUILD
   if (IsSelectionFile(original)) {
      return original;
   }

   const char *inc = strstr(original, "\\inc\\");
   if (!inc)
      inc = strstr(original, "/inc/");
   if (inc && strlen(inc) > 5)
      return inc + 5;
   return original;
#else
   return original;
#endif
}

//______________________________________________________________________________
void StrcpyWithEsc(string& escaped, const char *original)
{
   // Copy original into escaped BUT make sure that the \ characters
   // are properly escaped (on Windows temp files have \'s).

   int j = 0;
   escaped = "";
   while (original[j] != '\0') {
      if (original[j] == '\\')
         escaped += '\\';
      escaped += original[j++];
   }
}

//______________________________________________________________________________
void StrcpyArg(string& dest, const char *original)
{
   // Copy the command line argument, stripping MODULE/inc if
   // necessary.

   dest = CopyArg( original );
}

//______________________________________________________________________________
void StrcpyArgWithEsc(string& escaped, const char *original)
{
   // Copy the command line argument, stripping MODULE/inc if
   // necessary and then escaping string.

   escaped = CopyArg( original );
}

std::string gDictsrcForCleanup;
//______________________________________________________________________________
void CleanupOnExit(int code)
{
   // Removes tmp files, and (if code!=0) output files.

   if (code) {
      if (!gDictsrcForCleanup.empty()) {
         unlink(gDictsrcForCleanup.c_str());
         // also remove the .d file belonging to dictsrc
         size_t posExt=gDictsrcForCleanup.rfind('.');
         if (posExt!=string::npos) {
            gDictsrcForCleanup.replace(posExt, gDictsrcForCleanup.length(), ".d");
            unlink(gDictsrcForCleanup.c_str());
         }
      }
   }
   // also remove the .def file created by CINT.
   {
      size_t posExt=gDictsrcForCleanup.rfind('.');
      if (posExt!=string::npos) {
         gDictsrcForCleanup.replace(posExt, gDictsrcForCleanup.length(), ".def");
         unlink(gDictsrcForCleanup.c_str());

         size_t posSlash=gDictsrcForCleanup.rfind('/');
         if (posSlash==string::npos) {
            posSlash=gDictsrcForCleanup.rfind('\\');
         }
         if (posSlash!=string::npos) {
            gDictsrcForCleanup.replace(0,posSlash+1,"");
            unlink(gDictsrcForCleanup.c_str());
         }
      }
   }
}

//______________________________________________________________________________
static bool InjectModuleUtilHeader(const char* argv0,
                                  TModuleGenerator& modGen,
                                  cling::Interpreter& interp,
                                  bool umbrella)
{
   // Write the extra header injected into the module:
   // umbrella header if (umbrella) else content header.
   const std::string& hdrName
      = umbrella ? modGen.GetUmbrellaName() : modGen.GetContentName();
   {
      std::ofstream out(hdrName.c_str());
      if (!out) {
         ROOT::TMetaUtils::Error(0, "%s: failed to open header output %s\n",
                                 argv0, hdrName.c_str());
         return false;
      }
      if (umbrella) {
         // This will duplicate the -D,-U from clingArgs - but as they are surrounded
         // by #ifndef there is no problem here.
         modGen.WriteUmbrellaHeader(out);
      } else {
         modGen.WriteContentHeader(out);
      }
   }
   {
      std::string includeDirective("#include \"");
      includeDirective += hdrName + "\"";
      if (interp.declare(includeDirective) != cling::Interpreter::kSuccess) {
         ROOT::TMetaUtils::Error(0, "%s: compilation failure (%s)\n", argv0,
                                 hdrName.c_str());
         return false;
      }
   }
   return true;
}

//______________________________________________________________________________
static int GenerateModule(TModuleGenerator& modGen,
                          clang::CompilerInstance* CI,
                          const std::string &currentDirectory)
{
   // Generate the clang module given the arguments.
   // Returns != 0 on error.

   modGen.WriteRegistrationSource(*dictSrcOut);

   if (!modGen.IsPCH()) {
      CI->getPreprocessor().getHeaderSearchInfo().
         setModuleCachePath(modGen.GetModuleDirName().c_str());
   }

   clang::Module* module = 0;
   if (!modGen.IsPCH()) {
      std::vector<const char*> headersCStr;
      for (std::vector<std::string>::const_iterator
              iH = modGen.GetHeaders().begin(), eH = modGen.GetHeaders().end();
           iH != eH; ++iH) {
         headersCStr.push_back(iH->c_str());
      }
      headersCStr.push_back(0);
      module = ROOT::TMetaUtils::declareModuleMap(CI, modGen.GetModuleFileName().c_str(), &headersCStr[0]);
   }

   // From PCHGenerator and friends:
   llvm::SmallVector<char, 128> Buffer;
   llvm::BitstreamWriter Stream(Buffer);
   clang::ASTWriter Writer(Stream);
   llvm::raw_ostream *OS
      = CI->createOutputFile(modGen.GetModuleFileName().c_str(),
                             /*Binary=*/true,
                             /*RemoveFileOnSignal=*/false, /*InFile*/"",
                             /*Extension=*/"", /*useTemporary=*/false,
                             /*CreateMissingDirectories*/false);
   if (OS) {
      // Emit the PCH file
      CI->getFrontendOpts().RelocatablePCH = true;
      std::string ISysRoot("/DUMMY_SYSROOT/include/");
#ifdef ROOTBUILD
      ISysRoot = (currentDirectory + "/").c_str();
#endif
      Writer.WriteAST(CI->getSema(), modGen.GetModuleFileName().c_str(),
                      module, ISysRoot.c_str());

      // Write the generated bitstream to "Out".
      OS->write((char *)&Buffer.front(), Buffer.size());

      // Make sure it hits disk now.
      OS->flush();
      bool deleteOutputFile =  CI->getDiagnostics().hasErrorOccurred();
      CI->clearOutputFiles(deleteOutputFile);

   }

   // Free up some memory, in case the process is kept alive.
   Buffer.clear();

   return 0;
}

//______________________________________________________________________________
void AddPlatformDefines(std::vector<std::string>& clingArgs)
{
   char platformDefines[64] = {0};
   #ifdef __INTEL_COMPILER
   snprintf(platformDefines, 64, "-DG__INTEL_COMPILER=%ld", (long)__INTEL_COMPILER);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef __xlC__
   snprintf(platformDefines, 64, "-DG__xlC=%ld", (long)__xlC__);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef __GNUC__
   snprintf(platformDefines, 64, "-DG__GNUC=%ld", (long)__GNUC__);
   snprintf(platformDefines, 64, "-DG__GNUC_VER=%ld", (long)__GNUC__*1000 + __GNUC_MINOR__);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef __GNUC_MINOR__
   snprintf(platformDefines, 64, "-DG__GNUC_MINOR=%ld", (long)__GNUC_MINOR__);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef __HP_aCC
   snprintf(platformDefines, 64, "-DG__HP_aCC=%ld", (long)__HP_aCC);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef __sun
   snprintf(platformDefines, 64, "-DG__sun=%ld", (long)__sun);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef __SUNPRO_CC
   snprintf(platformDefines, 64, "-DG__SUNPRO_CC=%ld", (long)__SUNPRO_CC);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef _STLPORT_VERSION
   // stlport version, used on e.g. SUN
   snprintf(platformDefines, 64, "-DG__STLPORT_VERSION=%ld", (long)_STLPORT_VERSION);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef __ia64__
   snprintf(platformDefines, 64, "-DG__ia64=%ld", (long)__ia64__);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef __x86_64__
   snprintf(platformDefines, 64, "-DG__x86_64=%ld", (long)__x86_64__);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef __i386__
   snprintf(platformDefines, 64, "-DG__i386=%ld", (long)__i386__);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef __arm__
   snprintf(platformDefines, 64, "-DG__arm=%ld", (long)__arm__);
   clingArgs.push_back(platformDefines);
   #endif
   #ifdef _WIN32
   snprintf(platformDefines, 64, "-DG__WIN32=%ld",(long)_WIN32);
   clingArgs.push_back(platformDefines);
   #else
   # ifdef WIN32
   snprintf(platformDefines, 64, "-DG__WIN32=%ld",(long)WIN32);
   clingArgs.push_back(platformDefines);
   # endif
   #endif
   #ifdef _MSC_VER
   snprintf(platformDefines, 64, "-DG__MSC_VER=%ld",(long)_MSC_VER);
   clingArgs.push_back(platformDefines);
   snprintf(platformDefines, 64, "-DG__VISUAL=%ld",(long)_MSC_VER);
   clingArgs.push_back(platformDefines);
   #endif
}

//______________________________________________________________________________
void replaceAll(std::string& str, const std::string& from, const std::string& to)
{
   if(from.empty())
      return;
   size_t start_pos = 0;
   while((start_pos = str.find(from, start_pos)) != std::string::npos) {
      str.replace(start_pos, from.length(), to);
      start_pos += to.length();
   }
}

//______________________________________________________________________________
void extractFileName(const std::string& path, std::string& filename)
{
   // Extract the filename from a fullpath finding the last \ or /
   // according to the content in gPathSeparator
   const size_t pos = path.find_last_of(gPathSeparator);
   if(std::string::npos != pos){
      filename.assign(path.begin() + pos + 1, path.end());
   } else {
      filename.assign(path);
   }
}

//______________________________________________________________________________
void extractFilePath(const std::string& path, std::string& dirname)
{
   // Extract the path from a fullpath finding the last \ or /
   // according to the content in gPathSeparator
   const size_t pos = path.find_last_of(gPathSeparator);
   if(std::string::npos != pos){
      dirname.assign(path.begin(), path.begin() + pos + 1);
   } else {
      dirname.assign("");
   }
}

//______________________________________________________________________________
void manipForRootmap(std::string& name)
{
   // A set of rules are applied in order to transform the name for the rootmap
   // file
   // * "::" becomes "@@"
   // * "{const,unsigned,signed} " become "{const,unsigned,signed}-"
   // * "short int" becomes "short"
   // * "long int" becomes "long"
   // * "long long" becomes "long-long"
   // * "long double" becomes "long-double"
   // * " " becomes ""
   // * ">>" becomes ">->" except for "operator>>"


   // * "::" becomes "@@"
   replaceAll(name,"::","@@");


   // * "{const,unsigned,signed} " become "{const,unsigned,signed}-"
   // We do it in 2 steps: trim the spaces and replace
   // 1
   name.erase(name.find_last_not_of(" \n\r\t")+1);
   // 2
   replaceAll(name,"const ","const-");
   replaceAll(name,"signed ","signed-");
   
   // * "short int" becomes "short"
   replaceAll(name,"short int","short");
   
   // * "long int" becomes "long"
   replaceAll(name,"long int","long");
   
   // * "long long" becomes "long-long"
   replaceAll(name,"long long","long-long");
   
   // * "long double" becomes "long-double"
   replaceAll(name,"long double","long-double");
   
   // * " " becomes ""
   replaceAll(name," ","");
   // But this is could be more efficient
   //name.erase(std::remove_if(name.begin(), name.end(), isspace), name.end());
   
   // * ">>" becomes ">->" except for "operator>>"
   // We replace blindly and recursively and then roll back for operator>->
   // in other words "Better to Say Sorry than to Ask Permission"
   while (name.find(">>") != std::string::npos){
      replaceAll(name,">>",">->");
   }
   replaceAll(name,"operator>->","operator>>");

}

//______________________________________________________________________________
void createRootMapFile(const std::string& rootmapFileName,
                       const std::string& rootmapLibName,
                       RScanner& scan)
{

//    if (genreflex::verbose){
//       std::cout << "*** genreflex: rootmapfile = "
//                 << rootmapFileName
//                 << " -- rootmaplib = "
//                 << rootmapLibName << std::endl;
//       }

   // Create the rootmap file from the selected classes and namespaces
   std::ofstream rootmapFile(rootmapFileName.c_str());

   // Preamble
   time_t rawtime;  
   time (&rawtime);
   rootmapFile << "# Automatically generated with genreflex on " << ctime(&rawtime);

   // Loop on selected classes and insert them in the rootmap   
   for (RScanner::ClassColl_t::const_iterator selClassesIter = scan.fSelectedClasses.begin();
        selClassesIter!= scan.fSelectedClasses.end(); selClassesIter++){
      std::string className(selClassesIter->GetNormalizedName());
      manipForRootmap(className);
      rootmapFile << "Library." << className << ":"
                  << std::setw(35-className.size()) << rootmapLibName
                  << std::endl;   
      }
   
   // Same for namespaces
   for (RScanner::NamespaceColl_t::const_iterator selNsIter = scan.fSelectedNamespaces.begin();
        selNsIter!= scan.fSelectedNamespaces.end(); selNsIter++){
      std::string className(ROOT::TMetaUtils::R__GetQualifiedName(* selNsIter->GetNamespaceDecl()));
      manipForRootmap(className);
      rootmapFile << "Library." << className << ":"
                  << std::setw(35-className.size()) << rootmapLibName
                  << std::endl;
        }   
}


// cross-compiling for iOS and iOS simulator (assumes host is Intel Mac OS X)
#if defined(R__IOSSIM) || defined(R__IOS)
#ifdef __x86_64__
#undef __x86_64__
#endif
#ifdef __i386__
#undef __i386__
#endif
#ifdef R__IOSSIM
#define __i386__ 1
#endif
#ifdef R__IOS
#define __arm__ 1
#endif
#endif

//______________________________________________________________________________
int RootCling(int argc,
              char **argv,
              const std::string& rootmapFileName="",
              const std::string& rootmapLibName="",
              bool isDeep=false)
{
   if (argc < 2) {
      fprintf(stderr,
              "Usage: %s [-v][-v0-4] [-f] [out.cxx] [-s sharedLibrary] [-m pcmfile] file1.h[+][-][!] file2.h[+][-][!]...[LinkDef.h]\n",
              argv[0]);
      fprintf(stderr, "For more extensive help type: %s -h\n", argv[0]);
      return 1;
   }

   std::string dictname;
   std::string dictpathname;
   int ic, force = 0, onepcm = 0;
   bool requestAllSymbols = isDeep; 

   std::string currentDirectory;
   GetCurrentDirectory(currentDirectory);

   int verbosityLevel=0;
   ic = 1;
   if (!strcmp(argv[ic], "-v")) {
      ROOT::TMetaUtils::gErrorIgnoreLevel = ROOT::TMetaUtils::kInfo; // The default is kError
      ic++;
   } else if (!strcmp(argv[ic], "-v0")) {
      ROOT::TMetaUtils::gErrorIgnoreLevel = ROOT::TMetaUtils::kFatal; // Explicitly remove all messages
      ic++;
   } else if (!strcmp(argv[ic], "-v1")) {
      ROOT::TMetaUtils::gErrorIgnoreLevel = ROOT::TMetaUtils::kError; // Only error message (default)
      ic++;
   } else if (!strcmp(argv[ic], "-v2")) {
      ROOT::TMetaUtils::gErrorIgnoreLevel = ROOT::TMetaUtils::kWarning; // error and warning message
      ic++;
   } else if (!strcmp(argv[ic], "-v3")) {
      ROOT::TMetaUtils::gErrorIgnoreLevel = ROOT::TMetaUtils::kNote; // error, warning and note
      ic++;
   } else if (!strcmp(argv[ic], "-v4")) {
      ROOT::TMetaUtils::gErrorIgnoreLevel = ROOT::TMetaUtils::kInfo; // Display all information (same as -v)
      verbosityLevel=4;
      ic++;
   }
   if (ic < argc) {
      if (!strcmp(argv[ic], "-cint")) {
         // Flag is ignored, should warn of deprecation.
         ic++;
      } else if (!strcmp(argv[ic], "-reflex")) {
         // Flag is ignored, should warn of deprecation.
         ic++;
      } else if (!strcmp(argv[ic], "-gccxml")) {
         // Flag is ignored, should warn of deprecation.
         ic++;
      }
   }

   const char* libprefix = "--lib-list-prefix=";

   while (ic < argc && strncmp(argv[ic], "-",1)==0
          && strcmp(argv[ic], "-f")!=0 ) {
      if (!strcmp(argv[ic], "-l")) {
         ic++;
      } else if (!strcmp(argv[ic], "-1")) {
         onepcm = 1;
         ic++;
      } else if (!strncmp(argv[ic],libprefix,strlen(libprefix))) {

         gLiblistPrefix = argv[ic]+strlen(libprefix);

         string filein = gLiblistPrefix + ".in";
         FILE *fp;
         if ((fp = fopen(filein.c_str(), "r")) == 0) {
            ROOT::TMetaUtils::Error(0, "%s: The input list file %s does not exist\n", argv[0], filein.c_str());
            return 1;
         }
         fclose(fp);

         ic++;
      } else {
         break;
      }
   }

   if (ic < argc && !strcmp(argv[ic], "-f")) {
      force = 1;
      ic++;
   } else if (argc > 1 && (!strcmp(argv[1], "-?") || !strcmp(argv[1], "-h"))) {
      fprintf(stderr, "%s\n", rootClingHelp);
      return 1;
   } else if (ic < argc && !strncmp(argv[ic], "-",1)) {
      fprintf(stderr,"Usage: %s [-v][-v0-4] [-f] [out.cxx] file1.h[+][-][!] file2.h[+][-][!]...[LinkDef.h]\n",
              argv[0]);
      fprintf(stderr,"Only one verbose flag is authorized (one of -v, -v0, -v1, -v2, -v3, -v4)\n"
              "and must be before the -f flags\n");
      fprintf(stderr,"For more extensive help type: %s -h\n", argv[0]);
      return 1;
   } else {
      force = 0;
   }

#if defined(R__WIN32) && !defined(R__WINGCC)
   // cygwin's make is presenting us some cygwin paths even though
   // we are windows native. Convert them as good as we can.
   for (int iic = ic; iic < argc; ++iic) {
      std::string iiarg(argv[iic]);
      if (FromCygToNativePath(iiarg)) {
         size_t len = iiarg.length();
         // yes, we leak.
         char* argviic = new char[len + 1];
         strlcpy(argviic, iiarg.c_str(), len + 1);
         argv[iic] = argviic;
      }
   }
#endif

   if (ic < argc && (strstr(argv[ic],".C")  || strstr(argv[ic],".cpp") ||
       strstr(argv[ic],".cp") || strstr(argv[ic],".cxx") ||
       strstr(argv[ic],".cc") || strstr(argv[ic],".c++"))) {
      FILE *fp;
      if ((fp = fopen(argv[ic], "r")) != 0) {
         fclose(fp);
         if (!force) {
            ROOT::TMetaUtils::Error(0, "%s: output file %s already exists\n", argv[0], argv[ic]);
            return 1;
         }
      }
      string header( argv[ic] );
      header = argv[ic];
      int loc = strrchr(argv[ic],'.') - argv[ic];
      header[loc+1] = 'h';
      header[loc+2] = '\0';
      if ((fp = fopen(header.c_str(), "r")) != 0) {
         fclose(fp);
         if (!force) {
            ROOT::TMetaUtils::Error(0, "%s: output file %s already exists\n", argv[0], header.c_str());
            return 1;
         } else {
            for (int k = ic+1; k < argc; ++k) {
               if (*argv[k] != '-' && *argv[k] != '+') {
                  if (strcmp(header.c_str(),argv[k])==0) {
                     ROOT::TMetaUtils::Error(0, "%s: output file %s would overwrite one of the input files!\n", argv[0], header.c_str());
                     return 1;
                  }
                  if (strcmp(argv[ic],argv[k])==0) {
                     ROOT::TMetaUtils::Error(0, "%s: output file %s would overwrite one of the input files!\n", argv[0],argv[ic]);
                     return 1;
                  }
               }
            }
         }
      }

      // remove possible pathname to get the dictionary name
      if (strlen(argv[ic]) > (PATH_MAX-1)) {
         ROOT::TMetaUtils::Error(0, "rootcling: dictionary name too long (more than %d characters): %s\n",
               (PATH_MAX-1),argv[ic]);
         CleanupOnExit(1);
         return 1;
      }

      gDictsrcForCleanup = argv[ic];
      dictpathname = argv[ic];
      dictname = llvm::sys::path::filename(dictpathname);

      fp = fopen(argv[ic], "w");
      if (fp) fclose(fp);    // make sure file is created and empty
      ic++;

   } else if (!strcmp(argv[1], "-?") || !strcmp(argv[1], "-h")) {
      fprintf(stderr, "%s\n", rootClingHelp);
      return 1;
   } else {
      ic = 1;
      if (force) ic = 2;
   }

   std::vector<std::string> clingArgs;
   clingArgs.push_back(argv[0]);   
   clingArgs.push_back("-I.");
   clingArgs.push_back("-DROOT_Math_VectorUtil_Cint"); // ignore that little problem maker

   // Is this needed at all or just historical?
   if (! IsPointer<std::vector<int>::iterator>::kVal) {
      // Tell cling (for parsing pragma) that std::vector's iterator is a class
      clingArgs.push_back("-DG__VECTOR_HAS_CLASS_ITERATOR");
   }

#if !defined(ROOTBUILD) && defined(ROOTINCDIR)
   SetRootSys();
#endif

   if (ic < argc && !strcmp(argv[ic], "-c")) {
      // Simply ignore the -c options.
      ic++;
   }

   std::vector<std::string> baseModules;
   std::string sharedLibraryPathName;
   int nextStart = 0;
   while (ic < argc) {
      if (*argv[ic] == '-' || *argv[ic] == '+') {
         if (strcmp("-s", argv[ic]) == 0 && (ic+1) < argc) {
            // precompiled modules
            sharedLibraryPathName = argv[ic+1];
            ++ic;
         }
         if (strcmp("-m", argv[ic]) == 0 && (ic+1) < argc) {
            // precompiled modules
            baseModules.push_back(argv[ic+1]);
            ++ic;
         }
         if (strcmp("+P", argv[ic]) == 0 ||
             strcmp("+V", argv[ic]) == 0 ||
             strcmp("+STUB", argv[ic]) == 0) {
            // Ignore CINT arguments.
            continue;
         }
         if (strcmp("-pipe", argv[ic])!=0 && strcmp("-pthread", argv[ic])!=0) {
            // filter out undesirable options
            if (strcmp("-fPIC", argv[ic]) && strcmp("-fpic", argv[ic])
                && strcmp("-p", argv[ic])) 
               {
                  //std::cout << "Pushing to clingArgs " << argv[ic] << std::endl;
                  clingArgs.push_back(argv[ic]);
               }
         }
      } else if (nextStart == 0) {
         nextStart = ic;
      }
      ic++;
   }
   ic = nextStart;
   clingArgs.push_back(std::string("-I") + TMetaUtils::GetROOTIncludeDir(ROOTBUILDVAL));

   std::vector<std::string> pcmArgs;
   for (size_t parg = 0, n = clingArgs.size(); parg < n; ++parg) {
      if (clingArgs[parg] != "-c")
         pcmArgs.push_back(clingArgs[parg]);
   }

   // cling-only arguments
   std::string interpInclude = TMetaUtils::GetInterpreterExtraIncludePath(ROOTBUILDVAL);
   clingArgs.push_back(interpInclude);
   clingArgs.push_back("-D__ROOTCLING__");
   clingArgs.push_back("-fsyntax-only");
   clingArgs.push_back("-Xclang");
   clingArgs.push_back("-main-file-name");
   clingArgs.push_back("-Xclang");
   clingArgs.push_back((dictname + ".h").c_str());

   // Hack present for the root workshop: root6 preview distributed on an USB
   // stick with SLC5 + gcc46.
#ifdef R__GCC_TOOLCHAIN   
   clingArgs.push_back("-gcc-toolchain");
   clingArgs.push_back(R__GCC_TOOLCHAIN);
   clingArgs.push_back("-cxx-isystem");
   clingArgs.push_back(std::string(R__GCC_TOOLCHAIN) + "/include");
   clingArgs.push_back("-I");
   clingArgs.push_back(std::string(R__GCC_TOOLCHAIN) + "/include/c++/4.6.2");
   clingArgs.push_back("-I");
   clingArgs.push_back(std::string(R__GCC_TOOLCHAIN) + "/include/c++/4.6.2/x86_64-unknown-linux-gnu");
#endif

   std::vector<const char*> clingArgsC;
   for (size_t iclingArgs = 0, nclingArgs = clingArgs.size();
        iclingArgs < nclingArgs; ++iclingArgs) {
      clingArgsC.push_back(clingArgs[iclingArgs].c_str());
   }

#ifdef R__LLVMRESOURCEDIR
   gResourceDir = R__LLVMRESOURCEDIR;
#else
   gResourceDir = TMetaUtils::GetLLVMResourceDir(ROOTBUILDVAL);
#endif
   cling::Interpreter interp(clingArgsC.size(), &clingArgsC[0],
                             gResourceDir.c_str());
   if (interp.declare("namespace std {} using namespace std;") != cling::Interpreter::kSuccess
// CINT uses to define a few header implicitly, we need to do it explicitly.
       || interp.declare("#include <assert.h>\n"
                         "#include <stdlib.h>\n"
                         "#include <stddef.h>\n"
                         "#include <math.h>\n"
                         "#include <string.h>\n"
                         ) != cling::Interpreter::kSuccess
#ifdef ROOTBUILD
       || interp.declare("#include \"Rtypes.h\"") != cling::Interpreter::kSuccess
       || interp.declare("#include \"TClingRuntime.h\"") != cling::Interpreter::kSuccess
       || interp.declare("#include \"TObject.h\"") != cling::Interpreter::kSuccess
#else
# ifndef ROOTINCDIR
       || interp.declare("#include \"Rtypes.h\"") != cling::Interpreter::kSuccess
       || interp.declare("#include \"TClingRuntime.h\"") != cling::Interpreter::kSuccess
       || interp.declare("#include \"TObject.h\"") != cling::Interpreter::kSuccess
# else
       || interp.declare("#include \"" ROOTINCDIR "/Rtypes.h\"") != cling::Interpreter::kSuccess
       || interp.declare("#include \"" ROOTINCDIR "/TClingRuntime.h\"") != cling::Interpreter::kSuccess
       || interp.declare("#include \"" ROOTINCDIR "/TObject.h\"") != cling::Interpreter::kSuccess
# endif
#endif
       ) {
      // There was an error.
      ROOT::TMetaUtils::Error(0,"Error loading the default header files.");
      CleanupOnExit(1);
      return 1;
   }

   gInterp = &interp;

   // For the list of 'opaque' typedef to also include string, we have to include it now.
   interp.declare("#include <string>");

   // We are now ready (enough is loaded) to init the list of opaque typedefs.
   ROOT::TMetaUtils::TNormalizedCtxt normCtxt(interp.getLookupHelper());
   ROOT::TMetaUtils::TClingLookupHelper helper(interp, normCtxt);
   TClassEdit::Init(&helper);

   // flags used only for the pragma parser:
   clingArgs.push_back("-D__CINT__");
   clingArgs.push_back("-D__MAKECINT__");

   AddPlatformDefines(clingArgs);

   
   std::string interpPragmaSource;
   std::string includeForSource;
   string esc_arg;
   int firstInputFile = 0;
   int linkdefLoc = 0;
   for (int i = ic; i < argc; i++) {
      if (strcmp("-m", argv[i]) == 0 && (i+1) < argc) {
         // precompiled modules
         baseModules.push_back(argv[ic+1]);
         ++i;
         continue;
      }
      if (!firstInputFile && *argv[i] != '-' && *argv[i] != '+') {
         firstInputFile = i;
      }
      if (IsSelectionFile(argv[i])) {
         linkdefLoc = i;
         if (i != argc-1) {
            ROOT::TMetaUtils::Error(0, "%s: %s must be last file on command line\n", argv[0], argv[i]);
            CleanupOnExit(1);
            return 1;
         }
      }
      if (!strcmp(argv[i], "-c")) {
         // Simply ignore the -c options.
         // ROOT::TMetaUtils::Error(0, "%s: option -c must come directly after the output file\n", argv[0]);
         // return 1;
      }
      if (strcmp("-pipe", argv[ic])!=0) {
         // filter out undesirable options

         if (*argv[i] != '-' && *argv[i] != '+') {
            // Looks like a file

            bool isSelectionFile = IsSelectionFile(argv[i]);

            string argkeep;
            // coverity[tainted_data] The OS should already limit the argument size, so we are safe here
            if (!isSelectionFile) StrcpyArg(argkeep, argv[i]);
            std::string header( isSelectionFile ? argv[i] : GetRelocatableHeaderName( argv[i], currentDirectory ) );
            // Strip any trailing + which is only used by GeneratedLinkdef.h which currently 
            // use directly argv.
            if (header[header.length()-1]=='+') {
               header.erase(header.length()-1);
            }

            // We are 'normalizing' the file in two different way.  StrcpyArg (from rootcling)
            // strip just the ROOTBUILD part (i.e. $PWD/package/module/inc) while
            // GetRelocatableHeaderName also $PWD.
            // GetRelocatableHeaderName is likely to be too aggressive and the
            // ROOTBUILD part should really be removed by changing the ROOT makefile
            // to pass -I and path relative to the include path.
            interpPragmaSource += std::string("#include \"") + header + "\"\n";
            if (!isSelectionFile) {
               includeForSource += std::string("#include \"") + header + "\"\n";
               pcmArgs.push_back(header);
            } else if (!IsSelectionXml(argv[i]) && interp.declare(std::string("#include \"") + header + "\"\n")
                     != cling::Interpreter::kSuccess) {
               ROOT::TMetaUtils::Error(0, "%s: Linkdef compilation failure\n", argv[0]);
               CleanupOnExit(1);
               return 1;
            }
         }
      }
   }

   if (!firstInputFile) {
      ROOT::TMetaUtils::Error(0, "%s: no input files specified\n", argv[0]);
      CleanupOnExit(1);
      return 1;
   }

   if (sharedLibraryPathName.empty()) {
      sharedLibraryPathName = dictpathname;
   }

   // Until the module are actually enabled in ROOT, we need to register
   // the 'current' directory to make it relocatable (i.e. have a way
   // to find the headers).
   string incCurDir = "-I";
   incCurDir += currentDirectory;
   pcmArgs.push_back(incCurDir);

   TModuleGenerator modGen(interp.getCI(), sharedLibraryPathName.c_str());
   modGen.ParseArgs(pcmArgs);
   if (!InjectModuleUtilHeader(argv[0], modGen, interp, true)
       || !InjectModuleUtilHeader(argv[0], modGen, interp, false)) {
      CleanupOnExit(1);
      return 1;
   }

   if (!linkdefLoc) {
      // Generate autolinkdef
      GenerateLinkdef(&argc, argv, firstInputFile, interpPragmaSource);
   }

   // make name of dict include file "aapDict.cxx" -> "aapDict.h"
   std::string dictheader( dictpathname );
   if (!dictheader.empty()) {
      size_t pos = dictheader.rfind('.');
      if (pos != std::string::npos) dictheader.erase(pos);
      dictheader.append(".h");
   }
   std::string inclf(dictname);
   if (!inclf.empty()) {
      size_t pos = inclf.rfind('.');
      if (pos != std::string::npos) inclf.erase(pos);
      inclf.append(".h");
   }
   // Check if code goes to stdout or rootcling file
   std::ofstream fileout;
   std::ofstream headerout;
   if (!dictpathname.empty()) {
      fileout.open(dictpathname.c_str());
      dictSrcOut = &fileout;
      if (!(*dictSrcOut)) {
         ROOT::TMetaUtils::Error(0, "rootcling: failed to open %s in main\n",
               dictpathname.c_str());
         CleanupOnExit(1);
         return 1;
      }
      headerout.open(dictheader.c_str());
      dictHdrOut = &headerout;
      if (!(*dictHdrOut)) {
         ROOT::TMetaUtils::Error(0, "rootcling: failed to open %s in main\n",
               dictheader.c_str());
         CleanupOnExit(1);
         return 1;
      }
   } else {
      dictSrcOut = &std::cout;
      dictHdrOut = &std::cout;
   }

   string main_dictname(dictpathname);
   {
      size_t dh = main_dictname.rfind('.');
      if (dh != std::string::npos) {
         main_dictname.erase(dh);
      }
      // Need to replace all the characters not allowed in a symbol ...
      std::string main_dictname_copy(main_dictname);
      TMetaUtils::GetCppName(main_dictname, main_dictname_copy.c_str());
   }

   time_t t = time(0);
   (*dictSrcOut) << "//"  << std::endl
                 << "// File generated by " << argv[0] << " at " << ctime(&t) << std::endl
                 << "// Do NOT change. Changes will be lost next time file is generated" << std::endl
                 << "//" << std::endl << std::endl

                 << "#define R__DICTIONARY_FILENAME " << main_dictname << std::endl
                 << "#include \"" << inclf << "\"\n"
                 << "#include \"TDataMember.h\"\n" // To set their transiency
                 << std::endl;
#ifndef R__SOLARIS
   (*dictSrcOut) << "// Since CINT ignores the std namespace, we need to do so in this file." << std::endl
                 << "namespace std {} using namespace std;" << std::endl << std::endl;
#endif

   //---------------------------------------------------------------------------
   // Parse the linkdef or selection.xml file.
   //---------------------------------------------------------------------------

   string linkdefFilename;
   if (!linkdefLoc) {
      linkdefFilename = "in memory";
   } else {
      bool found = Which(interp, argv[linkdefLoc], linkdefFilename);
      if (!found) {
         ROOT::TMetaUtils::Error(0, "%s: cannot open linkdef file %s\n", argv[0], argv[linkdefLoc]);
         CleanupOnExit(1);
         return 1;
      }
   }

   SelectionRules selectionRules(interp);
   std::string extraIncludes;

   bool isSelXML = IsSelectionXml(linkdefFilename.c_str());
   
   if (requestAllSymbols && !isSelXML) {
      selectionRules.SetDeep(true);
   } else if (!linkdefLoc) {
      // There is no linkdef file, we added the 'default' #pragma to
      // interpPragmaSource.

      LinkdefReader ldefr(interp);
      ldefr.SetIOCtorTypeCallback(ROOT::TMetaUtils::AddConstructorType);
      clingArgs.push_back("-Ietc/cling/cint"); // For multiset and multimap

      if (!ldefr.Parse(selectionRules, interpPragmaSource, clingArgs,
                       gResourceDir.c_str())) {
         ROOT::TMetaUtils::Error(0,"Parsing #pragma failed %s",linkdefFilename.c_str());
      }
      else {
         ROOT::TMetaUtils::Info(0,"#pragma successfully parsed.\n");
      }

      if (!ldefr.LoadIncludes(extraIncludes)) {
         ROOT::TMetaUtils::Error(0,"Error loading the #pragma extra_include.");
         CleanupOnExit(1);
         return 1;
      }
   } else if (isSelXML) {

      selectionRules.SetSelectionFileType(SelectionRules::kSelectionXMLFile);

      std::ifstream file(linkdefFilename.c_str());
      if(file.is_open()){
         ROOT::TMetaUtils::Info(0,"Selection XML file\n");

         XMLReader xmlr(interp);
         if (!xmlr.Parse(file, selectionRules)) {
            ROOT::TMetaUtils::Error(0,"Parsing XML file %s",linkdefFilename.c_str());
         }
         else {
            ROOT::TMetaUtils::Info(0,"XML file successfully parsed\n");
         }
         file.close();
      }
      else {
         ROOT::TMetaUtils::Error(0,"XML file %s couldn't be opened!\n",linkdefFilename.c_str());
      }

   } else if (IsLinkdefFile(linkdefFilename.c_str())) {

      std::ifstream file(linkdefFilename.c_str());
      if(file.is_open()) {
         ROOT::TMetaUtils::Info(0,"Using linkdef file: %s\n",linkdefFilename.c_str());
         file.close();
      }
      else {
         ROOT::TMetaUtils::Error(0,"Linkdef file %s couldn't be opened!\n",linkdefFilename.c_str());
      }

      selectionRules.SetSelectionFileType(SelectionRules::kLinkdefFile);

      LinkdefReader ldefr(interp);
      ldefr.SetIOCtorTypeCallback(ROOT::TMetaUtils::AddConstructorType);
      clingArgs.push_back("-Ietc/cling/cint"); // For multiset and multimap

      if (!ldefr.Parse(selectionRules, interpPragmaSource, clingArgs,
                       gResourceDir.c_str())) {
         ROOT::TMetaUtils::Error(0,"Parsing Linkdef file %s",linkdefFilename.c_str());
      }
      else {
         ROOT::TMetaUtils::Info(0,"Linkdef file successfully parsed.\n");
      }

      if(! ldefr.LoadIncludes(extraIncludes) ) {
         ROOT::TMetaUtils::Error(0,"Error loading the #pragma extra_include.");
         CleanupOnExit(1);
         return 1;
      }
   } else {

      ROOT::TMetaUtils::Error(0,"Unrecognized selection file: %s",linkdefFilename.c_str());

   }

   
   //---------------------------------------------------------------------------
   // Write schema evolution related headers and declarations
   //---------------------------------------------------------------------------
   if( !gReadRules.empty() || !gReadRawRules.empty() ) {
      (*dictSrcOut) << "#include \"TBuffer.h\"" << std::endl;
      (*dictSrcOut) << "#include \"TVirtualObject.h\"" << std::endl;
      (*dictSrcOut) << "#include <vector>" << std::endl;
      (*dictSrcOut) << "#include \"TSchemaHelper.h\"" << std::endl << std::endl;

      std::list<std::string>           includes;
      std::list<std::string>::iterator it;
      GetRuleIncludes( includes );
      for( it = includes.begin(); it != includes.end(); ++it )
         (*dictSrcOut) << "#include <" << *it << ">" << std::endl;
      (*dictSrcOut) << std::endl;
   }

   //---------------------------------------------------------------------------
   // Write all the necessary #include
   //---------------------------------------------------------------------------
   if (!onepcm) {
      (*dictSrcOut) << "// Header files passed as explicit arguments\n";
      (*dictSrcOut) << includeForSource;
      (*dictSrcOut) << "\n// Header files passed via #pragma extra_include\n";
      (*dictSrcOut) << extraIncludes << endl;
   }

   selectionRules.SearchNames(interp);

   clang::CompilerInstance* CI = interp.getCI();

   RScanner scan(selectionRules,interp,normCtxt,verbosityLevel);
   // If needed initialize the autoloading hook
   if (gLiblistPrefix.length()) {
      LoadLibraryMap();
      scan.SetRecordDeclCallback(RecordDeclCallback);
   }

   if (requestAllSymbols) {
      selectionRules.SetDeep(true);
   }

   scan.Scan(CI->getASTContext());

   bool has_input_error = false;

   if (genreflex::verbose)
      selectionRules.PrintSelectionRules();

   
// SELECTION LOOP
   // Check for error in the class layout before doing anything else.
   RScanner::ClassColl_t::const_iterator iter = scan.fSelectedClasses.begin();
   RScanner::ClassColl_t::const_iterator end = scan.fSelectedClasses.end();
   for( ; iter != end; ++iter)
   {
      if (ROOT::TMetaUtils::ClassInfo__HasMethod(*iter,"Streamer", interp)) {
         if (iter->RequestNoInputOperator()) {
            int version = ROOT::TMetaUtils::GetClassVersion(*iter, interp);
            if (version!=0) {
               // Only Check for input operator is the object is I/O has
               // been requested.
               has_input_error |= CheckInputOperator(*iter,interp);
            }
         }
      }
      has_input_error |= !CheckClassDef(*iter, interp);
   }

   if (has_input_error) {
      // Be a little bit makefile friendly and remove the dictionary in case of error.
      // We could add an option -k to keep the file even in case of error.
      CleanupOnExit(1);
      exit(1);
   }

   if (!onepcm) {

      //
      // We will loop over all the classes several times.
      // In order we will call
      //
      //     WriteClassInit (code to create the TGenericClassInfo)
      //     check for constructor and operator input
      //     WriteClassFunctions (declared in ClassDef)
      //     WriteClassCode (Streamer,ShowMembers,Auxiliary functions)
      //

      // The order of addition to the list of constructor type
      // is significant.  The list is sorted by with the highest
      // priority first.
      ROOT::TMetaUtils::AddConstructorType("TRootIOCtor", interp);
      ROOT::TMetaUtils::AddConstructorType("", interp);

      //
      // Loop over all classes and create Streamer() & Showmembers() methods
      //

      // SELECTION LOOP
      RScanner::NamespaceColl_t::const_iterator ns_iter = scan.fSelectedNamespaces.begin();
      RScanner::NamespaceColl_t::const_iterator ns_end = scan.fSelectedNamespaces.end();
      for( ; ns_iter != ns_end; ++ns_iter) {
         WriteNamespaceInit(*ns_iter);
      }

      iter = scan.fSelectedClasses.begin();
      end = scan.fSelectedClasses.end();
      for( ; iter != end; ++iter)
      {
         if (!iter->GetRecordDecl()->isCompleteDefinition()) {
            ROOT::TMetaUtils::Error(0,"A dictionary has been requested for %s but there is no declaration!\n",ROOT::TMetaUtils::R__GetQualifiedName(* iter->GetRecordDecl()).c_str());
            continue;
         }
         if (iter->RequestOnlyTClass()) {
            // fprintf(stderr,"rootcling: Skipping class %s\n",R__GetQualifiedName(* iter->GetRecordDecl()).c_str());
            // For now delay those for later.
            continue;
         }
         
         // Very important: here we decide if we want to attach attributes to the decl.
         if (clang::CXXRecordDecl* CXXRD =
              llvm::dyn_cast<clang::CXXRecordDecl>(const_cast<clang::RecordDecl*>(iter->GetRecordDecl()))){
            AnnotateDecl(*CXXRD,selectionRules);
         }

         const clang::CXXRecordDecl* CRD = llvm::dyn_cast<clang::CXXRecordDecl>(iter->GetRecordDecl());

         if (CRD) {
            ROOT::TMetaUtils::Info(0,"Generating code for class %s\n", iter->GetNormalizedName() );
            std::string qualname( CRD->getQualifiedNameAsString() );
            if (TMetaUtils::IsStdClass(*CRD) && 0 != TClassEdit::STLKind(CRD->getName().str().c_str() /* unqualified name without template arguement */) ) {
               // coverity[fun_call_w_exception] - that's just fine.
               RStl::Instance().GenerateTClassFor( iter->GetNormalizedName(), CRD, interp, normCtxt);
            } else {
               ROOT::TMetaUtils::WriteClassInit(*dictSrcOut, *iter, CRD, interp, normCtxt, gNeedCollectionProxy);
            }
         }
      }

      //
      // Write all TBuffer &operator>>(...), Class_Name(), Dictionary(), etc.
      // first to allow template specialisation to occur before template
      // instantiation (STK)
      //
      // SELECTION LOOP
      iter = scan.fSelectedClasses.begin();
      end = scan.fSelectedClasses.end();
      for( ; iter != end; ++iter)
      {
         if (!iter->GetRecordDecl()->isCompleteDefinition()) {
            continue;
         }
         if (iter->RequestOnlyTClass()) {
            // For now delay those for later.
            continue;
         }
         const clang::CXXRecordDecl* cxxdecl = llvm::dyn_cast<clang::CXXRecordDecl>(iter->GetRecordDecl());
         if (cxxdecl && ROOT::TMetaUtils::ClassInfo__HasMethod(*iter,"Class_Name", interp)) {
            WriteClassFunctions(cxxdecl);
         }
      }

      // LINKDEF SELECTION LOOP
      // Loop to get the shadow class for the class marker 'RequestOnlyTClass' (but not the
      // STL class which is done via RStl::Instance().WriteClassInit(0);
      // and the ClassInit
      iter = scan.fSelectedClasses.begin();
      end = scan.fSelectedClasses.end();
      for( ; iter != end; ++iter)
      {
         if (!iter->GetRecordDecl()->isCompleteDefinition()) {
            continue;
         }
         if (!iter->RequestOnlyTClass()) {
            continue;
         }

         const clang::CXXRecordDecl* CRD = llvm::dyn_cast<clang::CXXRecordDecl>(iter->GetRecordDecl());

         if (!ROOT::TMetaUtils::IsSTLContainer(*iter)) {
            ROOT::TMetaUtils::WriteClassInit(*dictSrcOut, *iter, CRD, interp, normCtxt, gNeedCollectionProxy);
         }
      }
      // Loop to write all the ClassCode
      iter = scan.fSelectedClasses.begin();
      end = scan.fSelectedClasses.end();
      for( ; iter != end; ++iter)
      {
         ROOT::TMetaUtils::WriteClassCode(&CallWriteStreamer, *iter, interp, normCtxt, *dictSrcOut);
      }
   }

   // coverity[fun_call_w_exception] - that's just fine.
   ROOT::RStl::Instance().WriteClassInit(*dictSrcOut, interp, normCtxt, gNeedCollectionProxy);

   // Now we have done all our looping and thus all the possible
   // annotation, let's write the pcms.

   GenerateModule(modGen, CI, currentDirectory);

   // Now that CINT is not longer there to write the header file,
   // write one and include in there a few things for backward
   // compatibility.
   (*dictHdrOut) << "/********************************************************************\n";

   (*dictHdrOut) << "* " << dictheader << "\n";
   (*dictHdrOut) << "* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED\n";
   (*dictHdrOut) << "*          FROM HEADER FILES LISTED IN 'DictInit::headers'.\n";
   (*dictHdrOut) << "*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.\n";
   (*dictHdrOut) << "********************************************************************/\n";
   (*dictHdrOut) << "#include <stddef.h>\n";
   (*dictHdrOut) << "#include <stdio.h>\n";
   (*dictHdrOut) << "#include <stdlib.h>\n";
   (*dictHdrOut) << "#include <math.h>\n";
   (*dictHdrOut) << "#include <string.h>\n";
   (*dictHdrOut) << "#include <assert.h>\n";
   (*dictHdrOut) << "#define G__DICTIONARY\n";
   (*dictHdrOut) << "#include \"RConfig.h\"\n"
                 << "#include \"TClass.h\"\n"
                 << "#include \"TClassAttributeMap.h\"\n"
                 << "#include \"TInterpreter.h\"\n"
                 << "#include \"TROOT.h\"\n"
                 << "#include \"TBuffer.h\"\n"
                 << "#include \"TMemberInspector.h\"\n"
                 << "#include \"TError.h\"\n\n"
                 << "#ifndef G__ROOT\n"
                 << "#define G__ROOT\n"
                 << "#endif\n\n"
                 << "#include \"RtypesImp.h\"\n"
                 << "#include \"TIsAProxy.h\"\n"
                 << "#include \"TFileMergeInfo.h\"\n";
   (*dictSrcOut) << std::endl;
   if (gNeedCollectionProxy) {
      (*dictHdrOut) << "#include <algorithm>\n";
      (*dictHdrOut) << "\n#include \"TCollectionProxyInfo.h\"";
   }
   (*dictHdrOut) << "\n";

   if (gLiblistPrefix.length()) {
      string liblist_filename = gLiblistPrefix + ".out";

      ofstream outputfile( liblist_filename.c_str(), ios::out );
      if (!outputfile) {
         ROOT::TMetaUtils::Error(0,"%s: Unable to open output lib file %s\n",
               argv[0], liblist_filename.c_str());
      } else {
         const size_t endStr = gLibsNeeded.find_last_not_of(" \t");
         outputfile << gLibsNeeded.substr(0, endStr+1) << endl;
         // Add explicit delimiter
         outputfile << "# Now the list of classes\n";
// SELECTION LOOP
         iter = scan.fSelectedClasses.begin();
         end = scan.fSelectedClasses.end();
         for( ; iter != end; ++iter)
         {
            // Shouldn't it be GetLong64_Name( cl_input.GetNormalizedName() )
            // or maybe we should be normalizing to turn directly all long long into Long64_t
            outputfile << iter->GetNormalizedName() << endl;
         }
      }
   }

   CleanupOnExit(0);

   // Create the rootmapfile if needed
   if (!rootmapFileName.empty()){
      createRootMapFile(rootmapFileName,
                        rootmapLibName,
                        scan);
   }
   
   return 0;
}

namespace genreflex{

//______________________________________________________________________________
bool endsWith(const std::string& theString, const std::string& theSubstring)
{
   if (theString.size() < theSubstring.size()) return false;
   const unsigned int theSubstringSize = theSubstring.size();
   return 0 == theString.compare(theString.size()-theSubstringSize,
                                 theSubstringSize,
                                 theSubstring);
}

//______________________________________________________________________________
bool beginsWith(const std::string& theString, const std::string& theSubstring)
{
   if (theString.size() < theSubstring.size()) return false;
   const unsigned int theSubstringSize = theSubstring.size();
   return 0 == theString.compare(0,
                                 theSubstringSize,
                                 theSubstring);
}

//______________________________________________________________________________
bool isHeaderName(const std::string& filename)
{
   return endsWith(filename,".h") || endsWith(filename,".hpp");
}

//______________________________________________________________________________
unsigned int checkHeadersNames(std::vector<std::string>& headersNames)
{
   // Loop on arguments: stop at the first which starts with -
   unsigned int numberOfHeaders = 0;
   for (std::vector<std::string>::iterator it=headersNames.begin();
        it!=headersNames.end();it++){
      const std::string headername(*it);
      if ( isHeaderName( headername ) ) {
         numberOfHeaders++;
      } else {
         ROOT::TMetaUtils::Warning(0,
            "*** genreflex: %s is not a vaild header name (.h and .hpp extensions expected)!\n",
            headername.c_str());
      }
   }
   return numberOfHeaders;   
}

//______________________________________________________________________________
unsigned int extractArgs(int argc, char** argv, std::vector<std::string>& args)
{
   // Extract the arguments from the command line
   
   // loop on argv, spot strings which are not preceeded by something
   // starting with "-" and do not start with "-"
//    std::vector<unsigned int> argsIndeces;
   unsigned int argvCounter=0;
   for (int i=1;i<argc;++i){
      if (!beginsWith(argv[i-1],"-") && // so, if preceeding element starts with -, this is a value for an option
          !beginsWith(argv[i],"-")){ // and the element itself is not an option
//          argsIndeces.push_back(i);
         args.push_back(argv[i]);         
         argvCounter++;
         }
   }

//    // now create a new argv w/o the arguments, adapt argc
//    int newArgc = argc - argsIndeces.size();
//    std::vector<char*> newArgv (newArgc);
//    unsigned int argvCounter=0;
//    for (int i=0;i<argc;++i){
//       // if index was NOT the one of an arg,copy in argv
//       if (count (argsIndeces.begin(), argsIndeces.end(), i) == 0){
//          newArgv[argvCounter]=argv[i];
//          argvCounter++;
//       }
//    }

   // Some debug
//    if (genreflex::verbose){
//      std::cout << "Old commandline: \n";
//      for (int i=0;i<argc;++i){
//         std::cout << i << ") " << argv[i] << std::endl;
//      }     
//    }
   
//    // Assign to argv now
//    for (int i=0;i<newArgc;++i){
//       argv[i]=newArgv[i];
//       }

   // Some debug
   if (genreflex::verbose){
      int i=0;
      std::cout << "Args: \n";
      for (std::vector<std::string>::iterator it = args.begin();
           it < args.end();++it){
         std::cout << i << ") " << *it << std::endl;
         ++i;
      }

   }

//    for (int i=0;i<argc;++i){
//       std::cout << argv << ": " << &argv[i] << " = " << argv[i] << std::endl;
//    }
//    
   return argvCounter;
}

//______________________________________________________________________________
void changeExtension(std::string& filename, const std::string& newExtension)
{
   size_t result = filename.find_last_of('.'); 
   if (std::string::npos != result){
      filename.erase(result);
      filename.append(newExtension);
   }   
      
}

//______________________________________________________________________________
bool isExistingDir(const std::string& path)
{

   int returnCode = 0;
   bool isDir = false;
   #ifdef WIN32
   struct _stati64 finfo;
   returnCode = _stati64(path.c_str(), &finfo);
   isDir = (finfo.st_mode & S_IFDIR);
   #else
   struct stat finfo;
   returnCode = lstat(path.c_str(), &finfo);
   isDir = S_ISDIR(finfo.st_mode);
   #endif
   return returnCode==0 && isDir;  
}

//______________________________________________________________________________
char* string2charptr(const std::string& str)
{
   // The caller is responsible for deleting the string!
   const unsigned int size(str.size());
   char *a=new char[size+1];
   a[size]=0;
   memcpy(a,str.c_str(),size);
   return a;
}

//______________________________________________________________________________
void header2outputName(std::string& fileName)
{
   // Replace the extension with "_rflx.cpp"
   changeExtension(fileName,"_rflx.cpp");
}

//______________________________________________________________________________
void headers2outputsNames(const std::vector<std::string>& headersNames,
                          std::vector<std::string>& ofilesnames)
{
   // Get a proper name for the output file

   ofilesnames.reserve(headersNames.size());

   for (std::vector<std::string>::const_iterator it = headersNames.begin();
        it!=headersNames.end();it++){
      std::string ofilename(*it);
      header2outputName(ofilename);
      ofilesnames.push_back(ofilename);
      }
}

//______________________________________________________________________________
void AddToArgVector(std::vector<char*>& argvVector,
                    const std::vector<std::string>& argsToBeAdded,
                    const std::string& optName="")
{
   for (std::vector<std::string>::const_iterator it = argsToBeAdded.begin();
        it!=argsToBeAdded.end();it++){
      argvVector.push_back(string2charptr(optName+*it));
   }   
}

//______________________________________________________________________________
void AddToArgVectorSplit(std::vector<char*>& argvVector,
                    const std::vector<std::string>& argsToBeAdded,
                    const std::string& optName="")
{
   for (std::vector<std::string>::const_iterator it = argsToBeAdded.begin();
        it!=argsToBeAdded.end();it++){
      if (optName.length()) {
         argvVector.push_back(string2charptr(optName));
      }
      argvVector.push_back(string2charptr(*it));
   }   
}

//______________________________________________________________________________
int invokeRootCling(const std::string& verbosity,
                    const std::string& selectionFileName,
                    const std::string& targetLibName,
                    const std::vector<std::string>& pcmsNames,
                    const std::vector<std::string>& includes,
                    const std::vector<std::string>& preprocDefines,
                    const std::vector<std::string>& preprocUndefines,
                    const std::string& rootmapFileName,
                    const std::string& rootmapLibName,
                    bool isDeep,
                    const std::vector<std::string>& headersNames,
                    const std::string& ofilename){

   // Prepare and invoke the commandline to invoke rootcling
   // Adjust the name of the rootmap lib if not previously set

   // compute the number of arguments
   // 1) required: rootcling
   // 2) required: verbosity
   // 3) required: force rewrite
   // 4) required: output file name
   // 5) N pcms to be loaded before any header
   // 6) M headers (at least 1 required)
   // 7) optional: A selection file
   // 8) optional: A target library file
   // 9) optional: 2*K other options of type -I, -U, -D


   std::vector<char*> argvVector;
   argvVector.reserve(7 + // 5 required, 2 optional
                      (headersNames.size()-1) + // 1 header already counted
                      pcmsNames.size()*2+ // -m pcmName N times => 2N
                      includes.size()*2+  // -I include.h
                      preprocDefines.size()*2+ // -D
                      preprocUndefines.size()*2); // -U

   argvVector.push_back(string2charptr("rootcling"));
   argvVector.push_back(string2charptr(verbosity));
   argvVector.push_back(string2charptr("-f"));
   argvVector.push_back(string2charptr(ofilename));

   if (!targetLibName.empty()){
      argvVector.push_back(string2charptr("-s"));
      argvVector.push_back(string2charptr(targetLibName));
   }

   AddToArgVectorSplit(argvVector, pcmsNames, "-m");

   // Clingargs
   AddToArgVector(argvVector, includes, "-I");
   AddToArgVector(argvVector, preprocDefines, "-D");
   AddToArgVector(argvVector, preprocUndefines, "-U");
   
   AddToArgVector(argvVector, headersNames);
   
   if (!selectionFileName.empty()){
      argvVector.push_back(string2charptr(selectionFileName));
   }         
      
   const int argc = argvVector.size();
      
   // Output commandline for rootcling
   if (genreflex::verbose){
      std::cout << "Rootcling commandline:\n";
      for (int i=0;i<argc;i++)
         std::cout << i << ") " << argvVector[i] <<std::endl;
   }

   // Prepare the correct rootmap libname if not already set.
   std::string newRootmapLibName(rootmapLibName);
   if (!rootmapFileName.empty() && newRootmapLibName.empty()){
      if (headersNames.size() != 1){
         ROOT::TMetaUtils::Warning(0,
            "*** genreflex: No rootmap lib and several header specified!\n");
      }
      std::string cleanHeaderName;
      extractFileName(headersNames[0],cleanHeaderName);
      newRootmapLibName = "lib";
      newRootmapLibName+=cleanHeaderName;
      changeExtension(newRootmapLibName,".so");
   }

   // Prepend to the rootmap the directory of the directory of the header
   std::string headerLocation("");
   extractFilePath(ofilename,headerLocation); 
   
   char** argv =  & (argvVector[0]);
   int rootclingReturnCode = RootCling(argc,
                                       argv,
                                       headerLocation+rootmapFileName,
                                       newRootmapLibName,
                                       isDeep);

   for (int i=0;i<argc;i++)
      delete argvVector[i];

   return rootclingReturnCode;

}

//______________________________________________________________________________
int invokeManyRootCling(const std::string& verbosity,
                        const std::string& selectionFileName,
                        const std::string& targetLibName,
                        const std::vector<std::string>& pcmsNames,
                        const std::vector<std::string>& includes,
                        const std::vector<std::string>& preprocDefines,
                        const std::vector<std::string>& preprocUndefines,
                        const std::string& rootmapFileName,
                        const std::string& rootmapLibName,                        
                        bool isDeep,
                        const std::vector<std::string>& headersNames,
                        const std::string& outputDirName_const="")
{
   // Get the right ofilenames and invoke several times rootcling
   // One invokation per header

   std::string outputDirName(outputDirName_const);

   std::vector<std::string> ofilesNames;
   headers2outputsNames(headersNames,ofilesNames);

   if (!outputDirName.empty() && !endsWith(outputDirName,gPathSeparator)){
     outputDirName+=gPathSeparator;
   }

   std::vector<std::string> namesSingleton(1);
   for (unsigned int i=0;i<headersNames.size();++i){
      namesSingleton[0]=headersNames[i];
      int returnCode = invokeRootCling(verbosity,
                                       selectionFileName,
                                       targetLibName,
                                       pcmsNames,
                                       includes,
                                       preprocDefines,
                                       preprocUndefines,
                                       rootmapFileName,
                                       rootmapLibName,                                       
                                       isDeep,
                                       namesSingleton,
                                       outputDirName+ofilesNames[i]);
      if (returnCode!=0)
         return returnCode;
   }

   return 0;
}


} // end genreflex namespace

//______________________________________________________________________________
int extractMultipleOptions(std::vector<option::Option>& options,
                           int oIndex,
                           std::vector<std::string>& values)
{
   // Extract from options multiple values with the same option
   int nValues=0;
   if (options[oIndex]){
      const int nVals= options[oIndex].count();
      values.reserve(nVals);
      int optionIndex=0;
      for (option::Option* opt = options[oIndex]; opt; opt = opt->next()){
         if (genreflex::verbose) std::cout << "Extracting multiple args: "
                                           << optionIndex << "/" << nVals << " "
                                           << opt->arg << std::endl;
         optionIndex++;
         values.push_back(opt->arg);
         nValues++;
      }
   }
   return nValues;
}

//______________________________________________________________________________
void RiseWarningIfPresent(std::vector<option::Option>& options,
                          int optionIndex,
                          const char* descriptor)
{
   
   if (options[optionIndex]){
   ROOT::TMetaUtils::Warning(0,
                             "*** genereflex: %s is not supported anymore.\n",
                             descriptor);
   }
}

//______________________________________________________________________________
int GenReflex(int argc, char **argv)
{
   // Translate the aruments of genreflex into rootcling ones and forward them
   // to the RootCling function.
   // These are two typical genreflex and rootcling commandlines
   // 1) genreflex.py header1.h [header2.h ...] [options] [preprocessor options]
   // 2) rootcling [-v] [-v0-4] [-f] [out.cxx] [-s sharedlib.so] [-m pcmfilename]
   //     header1.h[{+,-}][!] ..headerN.h[{+,-}][!] [{LinkDef.h,selectionRules.xml}]
   // The rules with which the arguments are translated are (1st column genreflex):
   // --debug                             -v4
   // --quiet                             -v0
   // -o ofile                            positional arg after -f
   // -s selection file                   Last argument of the call
   // --fail_on_warning                   Wrap ROOT::TMetaUtils::Warning and throw if selected
   //
   // New arguments:
   // -l --library targetLib name         -l  targetLib name
   // -m pcmname (can be many -m)         -m pcmname (can be many -m)
   //
   // genreflex options which rise warnings (feedback is desirable)
   // -c, --capabilities (should not be needed with the new plufing system)
   // --no_membertypedefs (it should be irrelevant)
   // --no_templatetypedefs (it should be irrelevant)
   //
   // genreflex options which are ignored (know for sure they are not needed)
   // --pool, --dataonly
   // --interpreteronly
   // --gccxml{path,opt,post}
   // --reflex
   //  
   //
   // Exceptions
   // The --deep option of genreflex is passed as function parameter to rootcling
   // since it's not needed at the moment there.
   // Same is for the -I, -D and -U options.


   using namespace genreflex;

   // Setup the options parser
   enum  optionIndex { UNKNOWN,
                       OFILENAME,
                       TARGETLIB,
                       SELECTIONFILENAME,
                       ROOTMAP,
                       ROOTMAPLIB,
                       PCMFILENAME,
                       DEEP,
                       DEBUG,
                       QUIET,
                       HELP,
                       // Warnings
                       CAPABILITIESFILENAME,
                       NOMEMBERTYPEDEFS,
                       NOTEMPLATETYPEDEFS,
                       // Don't show up in the help
                       PREPROCDEFINE,
                       PREPROCUNDEFINE,
                       INCLUDE};

   enum  optionTypes { NOTYPE, STRING } ;

   // Some long help strings
   const char* genreflexUsage =
   "Generates pcm file from starting from the old genreflex syntax\n"
   "Usage: genreflex[.py] headerfile1.h [ ... headerfileN.h] [opts] [preproc. opts]\n\n"
   "Options:\n";

   const char* selectionFilenameUsage=
   "-s, --selection_file \tSelection filename\n"
   "      Class selection file to specify for which classes the dictionary\n"
   "      will be generated\n"
   "      Format (XML):\n"
   "        <lcgdict>\n"
   "        [<selection>]\n"
   "          <class [name=\"classname\"] [pattern=\"wildname\"]\n"
   "                 [file_name=\"filename\"] [file_pattern=\"wildname\"]\n"
   "                 [id=\"xxxx\"] [type=\"vector\"]/>\n"
   "          <class name=\"classname\" >\n"
   "            <field name=\"m_transient\" transient=\"true\"/>\n"
   "            <field name=\"m_anothertransient\" transient=\"true\"/>\n"
   "            <properties prop1=\"value1\" [prop2=\"value2\"]/>\n"
   "          </class>\n"
   "          <function [name=\"funcname\"] [pattern=\"wildname\"] />\n"
   "          <enum [name=\"enumname\"] [pattern=\"wildname\"] />\n"
   "          <variable [name=\"varname\"] [pattern=\"wildname\"] />\n"
   "        [</selection>]\n"
   "        <exclusion>\n"
   "          <class [name=\"classname\"] [pattern=\"wildname\"] />\n"
   "            <method name=\"unwanted\" />\n"
   "          </class>\n"
   "        ...\n"
   "        </lcgdict>\n";

   const char* outputFilenameUsage=
   "-o, --output \tOutput filename\n"
   "      Output file name. If an existing directory is specified instead of a file,\n"
   "      then a filename will be build using the name of the input file and will\n"
   "      be placed in the given directory. <headerfile>_rflx.cpp \n";

   const char* targetLib=
   "-l, --library \t Target library\n"
   "      The flag -l must be followed by the name of the library that will\n"
   "      contain the object file corresponding to the dictionary produced by\n"
   "      this invocation of genreflex.  The name will be used as the stem\n"
   "      for the name of the precompiled module generated by this\n"
   "      invocation of genreflex. It takes precedence over the rootmap lib.\n";

   const char* rootmapUsage=
   "--rootmap  \tGenerate the rootmap file to be used by ROOT.\n"
   "      This file lists the names of all classes for which the reflection\n"
   "      information is provided.";

   const char* rootmapLibUsage=
   "--rootmap-lib  \tLibrary name for the rootmap file.\n";
   
   // The Descriptor
   const option::Descriptor genreflexUsageDescriptor[] =
   {
      {UNKNOWN,
         NOTYPE,
         "","",
         option::Arg::None,
         genreflexUsage},

      {OFILENAME,
        STRING ,
        "o" , "output" ,
        option::FullArg::Required,
        outputFilenameUsage},

      {TARGETLIB,
        STRING ,
        "l" , "library" ,
        option::FullArg::Required,
        targetLib},

      {SELECTIONFILENAME,
        STRING ,
        "s" , "selection_file" ,
        option::FullArg::Required,
        selectionFilenameUsage},

      {ROOTMAP,
        STRING ,
        "" , "rootmap" ,
        option::FullArg::Required,
        rootmapUsage},

        {ROOTMAPLIB,
        STRING ,
        "" , "rootmap-lib" ,
        option::FullArg::Required,
        rootmapLibUsage},

      {PCMFILENAME,
        STRING ,
        "m" , "" ,
        option::FullArg::Required,
        "-m \tPcm file loaded before any header (option can be repeated)\n"},

      {DEEP,
        NOTYPE ,
        "" , "deep",
        option::Arg::None,
        "--deep  \tGenerate dictionaries for all dependent classes.\n"},

      {DEBUG,
        NOTYPE ,
        "" , "debug",
        option::Arg::None,
        "--debug  \tPrint debug information.\n"},

      {QUIET,
        NOTYPE ,
        "" , "quiet",
        option::Arg::None,
        "--quiet  \tPrint no information at all.\n"},

      {HELP,
        NOTYPE,
        "h" , "help",
        option::Arg::None,
        "--help   \tPrint usage and exit.\n"},

      // Left intentionally empty not to be shown in the help, like in the first genreflex
      {INCLUDE,
        STRING ,
        "I" , "" ,
        option::FullArg::Required,
        ""},

      {PREPROCDEFINE,
        STRING ,
        "D" , "" ,
        option::FullArg::Required,
        ""},        
        
      {PREPROCUNDEFINE,
        STRING ,
        "U" , "" ,
        option::FullArg::Required,
        ""},
        
      // Options that rise warnings
      {CAPABILITIESFILENAME,
        STRING ,
        "c" , "capabilities" ,
        option::FullArg::Required,
        ""},

      {NOMEMBERTYPEDEFS,
        STRING ,
        "" , "no_membertypedefs" ,
        option::FullArg::None,
        ""},

      {NOTEMPLATETYPEDEFS,
        STRING ,
        "" , "no_templatetypedefs" ,
        option::FullArg::None,
        ""},

        {0,0,0,0,0,0}
      };

   std::vector<std::string> headersNames;
   const int originalArgc=argc;
   // The only args are the headers here
   const int extractedArgs = extractArgs(argc,argv,headersNames); 

   const int offset = 1 + extractedArgs; // skip argv[0] and the headers
   argc-=offset;
   argv+=offset;

   // Parse the options
   option::Stats  stats(genreflexUsageDescriptor,  argc, argv);
   std::vector<option::Option> options(stats.options_max);// non POD var size arrays are not C++!
   std::vector<option::Option> buffer(stats.buffer_max);
   // The 4 is the minimum size of the abbreviation lenght.
   // For example, --selction_file can be abbreviated with --sele at least.

   std::cout << "Parsing\n";
   option::Parser parse(genreflexUsageDescriptor, argc, argv, &options[0], &buffer[0], 5);
   std::cout << "Parsing END\n";
   
   if (parse.error()){
      ROOT::TMetaUtils::Error(0, "*** genreflex: Argument parsing error!\n");
      return 1;
   }

   // Print help if needed
   if (options[HELP] || originalArgc == 1) {
      option::printUsage(std::cout, genreflexUsageDescriptor);
      return 0;
   }
   // See if no header was provided
   int numberOfHeaders = checkHeadersNames(headersNames);
   if (0 == numberOfHeaders){
      ROOT::TMetaUtils::Error(0, "*** genreflex: No valid header was provided!\n");
      return 1;
      }

   // Warnings:
   RiseWarningIfPresent(options,CAPABILITIESFILENAME,"Capabilities files");
   RiseWarningIfPresent(options,NOMEMBERTYPEDEFS,"Exclusion of member typedefs");
   RiseWarningIfPresent(options,NOTEMPLATETYPEDEFS,"Exclusion of template typedefs");

   // The verbosity: debug wins over quiet
   std::string verbosityOption("-v4"); // Changed for the testing phase. It should be -v
   if (options[QUIET]) verbosityOption="-v0";
   if (options[DEBUG]) verbosityOption="-v4";

   genreflex::verbose=verbosityOption=="-v4";

   // The selection file
   std::string selectionFileName;
   if (options[SELECTIONFILENAME]){
      selectionFileName = options[SELECTIONFILENAME].arg;
      if (!endsWith(selectionFileName, ".xml")){
         ROOT::TMetaUtils::Error(0,
            "*** genreflex: Invalid selection file extension: filename is %s and extension .xml is expected!\n",
            selectionFileName.c_str());
         return 1;
      }
   }

   // Set the parameters for the rootmap file. If the libname is not set,
   // it will be set according to the header in invokeRootCling.
   // FIXME: treatment of directories
   std::string rootmapFileName(options[ROOTMAP].arg ? options[ROOTMAP].arg : "");
   std::string rootmapLibName(options[ROOTMAPLIB].arg ? options[ROOTMAPLIB].arg : "");
   
   // The target lib name
   std::string targetLibName;
   if (options[TARGETLIB]){
      targetLibName = options[TARGETLIB].arg;
      if (!endsWith(targetLibName, ".so")){
         ROOT::TMetaUtils::Error(0,
            "*** genreflex: Invalid target library extension: filename is %s and extension .so is expected!\n",
            targetLibName.c_str());
      }
      // Target lib has precedence over rootmap lib
      rootmapLibName = options[TARGETLIB].arg;
   }

   // If the rootmaplib is not set, set one 

   // Add the .so extension to the rootmap lib if not there
   if (!rootmapLibName.empty() && !endsWith(rootmapLibName,".so")){
      rootmapLibName+=".so";
   }

   // The list of pcms to be preloaded
   std::vector<std::string> pcmsNames;
   extractMultipleOptions(options,PCMFILENAME, pcmsNames);

   // Preprocessor defines
   std::vector<std::string> preprocDefines;
   extractMultipleOptions(options,PREPROCDEFINE, preprocDefines);

   // Preprocessor undefines
   std::vector<std::string> preprocUndefines;
   extractMultipleOptions(options,PREPROCUNDEFINE, preprocUndefines);

   // Includes
   std::vector<std::string> includes;
   extractMultipleOptions(options,INCLUDE, includes);

   // The outputfilename(s)
   // There are two cases:
   // 1) The outputfilename is specified
   //   -->  The information of all headers will be in one single dictionary
   //     (1 call to rootcling)
   // 2) The outputfilename is not specified
   //   --> There will be a dictionary per header
   //     (N calls to rootcling)
   int returnValue = 0;
   std::string ofileName(options[OFILENAME] ? options[OFILENAME].arg : "");

   // Now check if the --deep option was selected
   bool isDeep = options[DEEP];

   // If not empty and not a directory (therefore it's a file)
   // call rootcling directly. The number of headers files is irrelevant.
   if (!ofileName.empty() && !isExistingDir(ofileName)){
      returnValue = invokeRootCling(verbosityOption,
                                    selectionFileName,
                                    targetLibName,
                                    pcmsNames,
                                    includes,
                                    preprocDefines,
                                    preprocUndefines,
                                    rootmapFileName,
                                    rootmapLibName,
                                    isDeep,
                                    headersNames,
                                    ofileName);
   } else{
   // Here ofilename is either "" or a directory: this is irrelevant.
      returnValue = invokeManyRootCling(verbosityOption,
                                        selectionFileName,
                                        targetLibName,
                                        pcmsNames,
                                        includes,
                                        preprocDefines,
                                        preprocUndefines,
                                        rootmapFileName,
                                        rootmapLibName,
                                        isDeep,
                                        headersNames,
                                        ofileName);
   }

   return returnValue;
}


//______________________________________________________________________________
int main(int argc, char **argv)
{

   const std::string exePath ( GetExePath() );

   std::string exeName;
   extractFileName(exePath,exeName);

   // Select according to the name of the executable the procedure to follow:
   // 1) RootCling
   // 2) GenReflex
   // The default is rootcling

   if (std::string::npos != exeName.find("rootcling")) {
      return RootCling(argc, argv);
   } else if (std::string::npos != exeName.find("genreflex")){
         return GenReflex(argc, argv);
   } else { //default
         return RootCling(argc, argv);
   }

}
